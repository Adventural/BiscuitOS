From a8759e608bef8a0c025533500629004458043349 Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.d.zhang@gmail.com>
Date: Fri, 3 Aug 2018 01:19:13 +0800
Subject: [PATCH 04/25] README

---
 tools/demo/mmu/storage/stack/README.md | 58 ++++++++++++++++++++++++++
 1 file changed, 58 insertions(+)

diff --git a/tools/demo/mmu/storage/stack/README.md b/tools/demo/mmu/storage/stack/README.md
index 112fc07..fd1fae6 100644
--- a/tools/demo/mmu/storage/stack/README.md
+++ b/tools/demo/mmu/storage/stack/README.md
@@ -100,3 +100,61 @@ instructions all perform operations on the current stack.
   the processor to maintain proper alignment of stack pointers. Misalignment
   a stack pointer can cause serious performance degradation and in some 
   instances program failures.
+
+## Address-Size Attribute for Stack Access
+
+  Instructions that use the stack implicitly (such as the `PUSH` and `POP`
+  instructions) have two address-size attributes each of either 16 or 32
+  bits. This is because they always have the implicit address of the top
+  of the stack, and they may also have an explicit memory address (for
+  example, `PUSH` Array1[EBX]]). The attribute of the explicit address is
+  determined by the `D` flag of the current code segment and presence or
+  absence of the `67H` addreeess-size prefix.
+
+  The address-size attribute of the top of the stack determines whether
+  `SP` or `ESP` is used for the stack access. Stack operations with an
+  address-size attribute of 16 use the 16-bit SP stack pointer register
+  and can use a maximum stack address of 0xFFFFH. Stack operations with
+  an address-size attribute of 32 bit use the 32-bit `ESP` register and
+  can use a maximum address of 0xFFFFFFFFH. The default address-size 
+  attribute for data segments used as stacks is 16. When the flag is set,
+  the address-size attribute is 32.
+
+## Procedure linking information
+
+  The processor provide two pointer for linking of procedures: the stack-
+  frame base pointer and the return instruction pointer. When used in 
+  conjunction with a standard software procedure-call technique, there
+  pointers permit reliable and coherent linking of procedures.
+
+#### Stack-Frame Base Pointer
+
+  The stack is typically divide into frames. Each stack frame can then 
+  contain local variables, parameters to be passed to another procedure,
+  and procedure linking information. The 
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-- 
2.17.1

