From 7114af0b5564a9699e926e855650e258d4a18a6b Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.zhang@aliyun.com>
Date: Fri, 10 Aug 2018 10:55:01 +0800
Subject: [PATCH 09/34]      IDTR: Interrupt Descriptor table -- SIDT/LIDT

---
 tools/demo/mmu/storage/register/IDTR/Kconfig  |  26 +++++
 tools/demo/mmu/storage/register/IDTR/Makefile |   1 +
 .../demo/mmu/storage/register/IDTR/README.md  |  27 +++++
 tools/demo/mmu/storage/register/IDTR/idtr.c   | 107 ++++++++++++++++++
 tools/demo/mmu/storage/register/Kconfig       |   6 +
 tools/demo/mmu/storage/register/LDTR/Kconfig  |   8 +-
 tools/demo/mmu/storage/register/LDTR/ldtr.c   |   8 +-
 tools/demo/mmu/storage/register/Makefile      |   2 +
 tools/demo/mmu/storage/register/TR/Kconfig    |  26 +++++
 tools/demo/mmu/storage/register/TR/Makefile   |   1 +
 tools/demo/mmu/storage/register/TR/README.md  |  38 +++++++
 tools/demo/mmu/storage/register/TR/tr.c       | 102 +++++++++++++++++
 12 files changed, 344 insertions(+), 8 deletions(-)
 create mode 100644 tools/demo/mmu/storage/register/IDTR/Kconfig
 create mode 100644 tools/demo/mmu/storage/register/IDTR/Makefile
 create mode 100644 tools/demo/mmu/storage/register/IDTR/README.md
 create mode 100644 tools/demo/mmu/storage/register/IDTR/idtr.c
 create mode 100644 tools/demo/mmu/storage/register/TR/Kconfig
 create mode 100644 tools/demo/mmu/storage/register/TR/Makefile
 create mode 100644 tools/demo/mmu/storage/register/TR/README.md
 create mode 100644 tools/demo/mmu/storage/register/TR/tr.c

diff --git a/tools/demo/mmu/storage/register/IDTR/Kconfig b/tools/demo/mmu/storage/register/IDTR/Kconfig
new file mode 100644
index 0000000..9227517
--- /dev/null
+++ b/tools/demo/mmu/storage/register/IDTR/Kconfig
@@ -0,0 +1,26 @@
+#
+# IDTR: Interrupt Descriptor Table Register
+#
+
+menu "IDTR:     Interrupt Descriptor Table Register"
+
+config DEBUG_REGISTER_IDTR
+	bool "IDTR: Interrupt descriptor Table Register"
+	help
+	  Debug IDTR Register.
+
+if DEBUG_REGISTER_IDTR
+
+config DEBUG_IDTR_SIDT
+	bool "SIDT: Store Interrupt Descriptor Table Register"
+	help
+	  Store IDTR into linear address.
+
+config DEBUG_IDTR_LIDT
+	bool "LIDT: Load  Interrupt Descriptor Table Register"
+	help
+	  Load linear address into IDTR.
+
+endif
+
+endmenu
diff --git a/tools/demo/mmu/storage/register/IDTR/Makefile b/tools/demo/mmu/storage/register/IDTR/Makefile
new file mode 100644
index 0000000..a119aeb
--- /dev/null
+++ b/tools/demo/mmu/storage/register/IDTR/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_DEBUG_REGISTER_IDTR)     += idtr.o
diff --git a/tools/demo/mmu/storage/register/IDTR/README.md b/tools/demo/mmu/storage/register/IDTR/README.md
new file mode 100644
index 0000000..09842a0
--- /dev/null
+++ b/tools/demo/mmu/storage/register/IDTR/README.md
@@ -0,0 +1,27 @@
+Interrupt Descriptor Table Register (IDTR)
+---------------------------------------------------------------------
+
+```
+ IDTR
+
+ 47                             16 15                      0
+ +--------------------------------+------------------------+
+ |                                |                        |
+ |   32-Bit Linear Base Address   |   16-Bit Table Limit   |
+ |                                |                        |
+ +--------------------------------+------------------------+
+
+```
+
+The `IDTR` register holds the base address (32 bits in protected mode) and
+16-bit table limit for the `IDT`. The base address specifies the linear
+address of byte 0 of the `IDT`. The table limit specifies the number of bytes
+in the table. The `LIDT` and `SIDT` instructions load and store the `IDTR`
+register, respectively. On power up or reset of the processor, the base
+address is set to the default value of 0 and the limit is set to 0xFFFFH. 
+The base address and limit in the register can then be changed as part of
+the processor initialization process.
+
+## link
+
+  [Intel Architectures Software Developer's Manual: Combined Volumes: 3 -- Chapter 2 System architecture overview: 2.4 Memory-Management register](https://software.intel.com/en-us/articles/intel-sdm)
diff --git a/tools/demo/mmu/storage/register/IDTR/idtr.c b/tools/demo/mmu/storage/register/IDTR/idtr.c
new file mode 100644
index 0000000..9024ac9
--- /dev/null
+++ b/tools/demo/mmu/storage/register/IDTR/idtr.c
@@ -0,0 +1,107 @@
+/*
+ * IDTR: Interrupt Descriptor Table Register
+ *
+ * (C) 2018.08.10 BiscuitOS <buddy.zhang@aliyun.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/kernel.h>
+
+#include <demo/debug.h>
+
+struct idtr_desc 
+{
+    unsigned short limit;
+    unsigned long linear;
+};
+
+/*
+ * SIDT -- Store Interrupt Descriptor Table Register
+ *
+ *   SIDT m
+ *
+ *   Stores the content the interrupt descriptor table register (IDTR) in
+ *   the destination operand. The destination operand specifies a 6-byte
+ *   memory location.
+ *
+ *   In non-64-bit modes, the 16-bit limit field of the register is stored
+ *   in the low 2 bytes of the memory location and the 32-bit base address
+ *   is stored in the high 4 bytes.
+ *
+ *   SIDT is only useful in operating-system software. Howeve, it can be
+ *   used in application program without causing an exception to be 
+ *   generated if CR4.UMIP = 0.
+ *
+ *   IF instruction is SIDT
+ *       THEN
+ *           IF OperandSize = 16 or OperandSize = 32
+ *               THEN
+ *                   DEST[0:15]   <---- IDTR(limit)
+ *                   DEST[16:47]  <---- IDTR(Base); FI
+ *               ELSE (* 64-bit Mode *)
+ *                   DEST[0:15]   <---- IDTR(limit)
+ *                   DEST[16:79]  <---- IDTR(Base) 
+ *           FI
+ *   FI
+ */
+static __unused int idtr_sidt(void)
+{
+    struct idtr_desc idtr;
+
+    __asm__ ("sidt %0" : "=m" (idtr) :);
+    return 0;
+}
+
+/*
+ * LIDT -- Load Interrupt Descriptor Table Register
+ *
+ *   LIDT m
+ *
+ *   Loads the values in the source operand into the interrupt descriptor
+ *   table register (IDTR). The source operand specifies a 6-byte memory
+ *   location that contains the base address (a linear address) and the
+ *   limit (size of table in bytes) of the interrupt descriptor table (IDT).
+ *   If operand-size attribute is 32 bits, a 16-bit limit (lower 2 bytes of
+ *   the 6 byte data operand) and a 32-bit base address (upper 4 bytes of
+ *   data operand) are loaded into the register. 
+ *
+ *   The LIDT instructions are used only in operating-system software. They
+ *   are not used in application programs. They are the only instructions 
+ *   that directly load a linear address (that is, not a segment-relative
+ *   address) and a limit in protected mode. 
+ *
+ *   IF instruction is LIDT
+ *       THEN
+ *           IF 32-bit Operand Size
+ *               THEN
+ *                   IDTR(limit)    <---- SRC[0:15]
+ *                   IDTR(Base)     <---- SRC[16:47]
+ *               FI
+ *           FI
+ *       FI
+ *   FI
+ */
+static __unused int idtr_lidt(void)
+{
+    struct idtr_desc idtr;
+
+    __asm__ ("sidt %0" : "=m" (idtr) :);
+
+    __asm__ ("lidt %0" :: "m" (idtr));
+    return 0;
+}
+
+static int debug_idtr(void)
+{
+#ifdef CONFIG_DEBUG_IDTR_SIDT
+    idtr_sidt();
+#endif
+
+#ifdef CONFIG_DEBUG_IDTR_LIDT
+    idtr_lidt();
+#endif
+    return 0;
+}
+late_debugcall(debug_idtr);
diff --git a/tools/demo/mmu/storage/register/Kconfig b/tools/demo/mmu/storage/register/Kconfig
index ded5b25..36195f9 100644
--- a/tools/demo/mmu/storage/register/Kconfig
+++ b/tools/demo/mmu/storage/register/Kconfig
@@ -16,6 +16,12 @@ source "tools/demo/mmu/storage/register/GDTR/Kconfig"
 # LDTR Register
 source "tools/demo/mmu/storage/register/LDTR/Kconfig"
 
+# IDTR Register
+source "tools/demo/mmu/storage/register/IDTR/Kconfig"
+
+# TR Register
+source "tools/demo/mmu/storage/register/TR/Kconfig"
+
 # CS Register
 source "tools/demo/mmu/storage/register/CS/Kconfig"
 
diff --git a/tools/demo/mmu/storage/register/LDTR/Kconfig b/tools/demo/mmu/storage/register/LDTR/Kconfig
index e809461..5f767ea 100644
--- a/tools/demo/mmu/storage/register/LDTR/Kconfig
+++ b/tools/demo/mmu/storage/register/LDTR/Kconfig
@@ -7,19 +7,19 @@ menu "LDTR:     Local Descriptor Table Register"
 config DEBUG_REGISTER_LDTR
 	bool "LDTR: Local Descriptor table regsiter"
 	help
-	  Debug GDTR Register.
+	  Debug LDTR Register.
 
 if DEBUG_REGISTER_LDTR
 
-config DEBUG_GDTR_SLDT
+config DEBUG_LDTR_SLDT
 	bool "SLDT: Store Local Descriptor Table Register"
 	help
 	  Store LDTR into linear address.
 
-config DEBUG_GDTR_LLDT
+config DEBUG_LDTR_LLDT
 	bool "LLDT: Load  Local Descriptor Table Register"
 	help
-	  Load linear address into GLTR.
+	  Load linear address into LDTR.
 
 endif
 
diff --git a/tools/demo/mmu/storage/register/LDTR/ldtr.c b/tools/demo/mmu/storage/register/LDTR/ldtr.c
index 4a2f99f..c9cc200 100644
--- a/tools/demo/mmu/storage/register/LDTR/ldtr.c
+++ b/tools/demo/mmu/storage/register/LDTR/ldtr.c
@@ -88,15 +88,15 @@ static __unused int ldtr_lldt(void)
     return 0;
 }
 
-static int debug_gdtr(void)
+static int debug_ldtr(void)
 {
-#ifdef CONFIG_DEBUG_GDTR_SLDT
+#ifdef CONFIG_DEBUG_LDTR_SLDT
     ldtr_sldt();
 #endif
 
-#ifdef CONFIG_DEBUG_GDTR_LLDT
+#ifdef CONFIG_DEBUG_LDTR_LLDT
     ldtr_lldt();
 #endif
     return 0;
 }
-late_debugcall(debug_gdtr);
+late_debugcall(debug_ldtr);
diff --git a/tools/demo/mmu/storage/register/Makefile b/tools/demo/mmu/storage/register/Makefile
index c4aee20..75053bb 100644
--- a/tools/demo/mmu/storage/register/Makefile
+++ b/tools/demo/mmu/storage/register/Makefile
@@ -1,3 +1,5 @@
 obj-$(CONFIG_DEBUG_REGISTER_GDTR)       += GDTR/
 obj-$(CONFIG_DEBUG_REGISTER_LDTR)       += LDTR/
+obj-$(CONFIG_DEBUG_REGISTER_IDTR)       += IDTR/
+obj-$(CONFIG_DEBUG_REGISTER_TR)         += TR/
 obj-$(CONFIG_DEBUG_REGISTER_CS)         += CS/
diff --git a/tools/demo/mmu/storage/register/TR/Kconfig b/tools/demo/mmu/storage/register/TR/Kconfig
new file mode 100644
index 0000000..a6d1d62
--- /dev/null
+++ b/tools/demo/mmu/storage/register/TR/Kconfig
@@ -0,0 +1,26 @@
+#
+# TR: Task Register
+#
+
+menu "TR:       Task Register"
+
+config DEBUG_REGISTER_TR
+	bool "TR: Task Register"
+	help
+	  Debug TR Register.
+
+if DEBUG_REGISTER_TR
+
+config DEBUG_TR_STR
+	bool "STR: Store Task Register"
+	help
+	  Store TR into linear address.
+
+config DEBUG_TR_LTR
+	bool "LTR: Load  Task Register"
+	help
+	  Load linear address into TR.
+
+endif
+
+endmenu
diff --git a/tools/demo/mmu/storage/register/TR/Makefile b/tools/demo/mmu/storage/register/TR/Makefile
new file mode 100644
index 0000000..a14a3e7
--- /dev/null
+++ b/tools/demo/mmu/storage/register/TR/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_DEBUG_REGISTER_TR)     += tr.o
diff --git a/tools/demo/mmu/storage/register/TR/README.md b/tools/demo/mmu/storage/register/TR/README.md
new file mode 100644
index 0000000..34e38fe
--- /dev/null
+++ b/tools/demo/mmu/storage/register/TR/README.md
@@ -0,0 +1,38 @@
+Local Descriptor Table Register (LDTR)
+---------------------------------------------------------------------
+
+```
+Task Register
+
+ System Segment    Segment Descriptor Registe4r (Automatically Loaded)
+   Register
+
+ 0            15                                                 
+ +-------------+ +----------------------------+---------------+-----------+
+ |             | |                            |               |           |
+ |   Seg.Sel   | | 32-bit Linear Base Address | Segment Limit | Attribute |
+ |             | |                            |               |           |
+ +-------------+ +----------------------------+---------------+-----------+
+
+```
+The task register holds the 16-bit segment selector, base address (32 bits
+in protected mode), segment limit, and descriptor attributes for the `TSS`
+of the current task. The selector references the `TSS` descriptor in the
+`GDT`. The base address specifies the linear address of byte 0 of the `TSS`.
+The segment limit specifies the number of bytes in the `TSS`.
+
+The `LTR` and `STR` instructions load and store the segment selector part
+of the task register, respectively. When the `LTR` instruction loads a
+segment selector in the task register, the base address, limit, and 
+descriptor attributes from the TSS descriptor are automatically loaded
+into the task register. On power up or reset of the processor, the base
+address is set to the default of the 0 and the limit is set to 0xFFFFH.
+
+When a task switch occurs, the task register is automatically loaded with
+the segment selector and descriptor for the `TSS` for the new task. The
+contents of the task regsiter are not automatically saved prior to writing
+the new `TSS` information into the register.
+
+## link
+
+  [Intel Architectures Software Developer's Manual: Combined Volumes: 3 -- Chapter 2 System architecture overview: 2.4 Memory-Management register](https://software.intel.com/en-us/articles/intel-sdm)
diff --git a/tools/demo/mmu/storage/register/TR/tr.c b/tools/demo/mmu/storage/register/TR/tr.c
new file mode 100644
index 0000000..8575a54
--- /dev/null
+++ b/tools/demo/mmu/storage/register/TR/tr.c
@@ -0,0 +1,102 @@
+/*
+ * TR: Task Register
+ *
+ * (C) 2018.08.09 BiscuitOS <buddy.zhang@aliyun.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/kernel.h>
+#include <demo/debug.h>
+
+/*
+ * STR -- Store Task Register
+ *
+ *   STR m16
+ *
+ *   Stores the segment selector from the task register (TR) in the
+ *   destination operand. The destination operand can be a general-purpose
+ *   register or a memory location. The segment selector stored with this
+ *   instruction points to the task segment (TSS) for the currently running
+ *   task.
+ *
+ *   When the destination operand is a 32-bit register, the 16-bit segment
+ *   selector is copied into the low 16 bits of the register and the upper
+ *   16 bits of the register are cleared. When the destination operand is
+ *   a memory locating, the segment selector is written to memory as a 16-bit
+ *   quantity, regardless of operand size.
+ *
+ *   DEST <--- TR (Segment Selector)
+ *
+ */
+static __unused int tr_str(void)
+{
+    unsigned short sel;
+
+    __asm__ ("str %0" : "=m" (sel) :);
+
+    return 0;
+}
+
+/*
+ * LTR -- Load Task Register
+ *
+ *   LTR m16
+ *
+ *   Loads the source operand into the segment selector field of the task
+ *   register. The source operand (a general-purpose register or a memory
+ *   location) contains a segment selector that points to a task state
+ *   segment (TSS). After the segment selector is loaded in the task
+ *   register, the processor uses the segment selector to locate the segment
+ *   descriptor for the TSS in the global descriptor table (GDT). It then
+ *   loads the segment limit and base address for the TSS from the segment
+ *   descriptor into the task register. The task pointed to by the task
+ *   register is marked busy, but a switch to the task does not occur.
+ *
+ *   The LTR instruction is provided for use in operating-system software.
+ *   It should not be used in application programs. It can only be executed
+ *   in protected mode when the CPL is 0. It is commonly used in
+ *   initialization code to establish the first task to be executed.
+ *
+ *   The operand-size attribute has no effect on this instruction.
+ *
+ *   IF SRC is a NULL selector
+ *       THEN #GP(0)
+ *   IF SRC(Offset) > descriptor table limit OR IF SRC(type) != global
+ *       THEN #GP(Segment selector)
+ *   FI
+ *   Read segment descriptor
+ *   IF Segment descriptor is not for an available TSS
+ *       THEN #GP(Segment selector)
+ *   IF segment descriptor is not present
+ *       THEN #NP(Segment selector)
+ *   FI
+ *   TSS segment descriptor (busy)    <--- 1
+ *   (*locked read-modify-write operation on the entire descriptor when setting
+ *      busy flag *)
+ *   TaskRegister(SegmentSelector)    <--- SRC
+ *   TaskRegister(SegmentDescriptor)  <--- TSS segment descriptor
+ */
+static __unused int tr_ltr(void)
+{
+    unsigned short tr;
+
+    __asm__ ("str %0" : "=m" (tr) :);
+
+    __asm__ ("ltr %0" :: "m" (tr));
+    return 0;
+}
+
+static int debug_tr(void)
+{
+#ifdef CONFIG_DEBUG_TR_STR
+    tr_str();
+#endif
+
+#ifdef CONFIG_DEBUG_TR_LTR
+    tr_ltr();
+#endif
+    return 0;
+}
+late_debugcall(debug_tr);
-- 
2.17.1

