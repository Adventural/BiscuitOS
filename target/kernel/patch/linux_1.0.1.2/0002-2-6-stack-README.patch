From b4a875cc920a9b5dc59e3f482a414d992e955bca Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.d.zhang@gmail.com>
Date: Wed, 1 Aug 2018 22:13:47 +0800
Subject: [PATCH 02/34] 2/6 stack: README

---
 tools/demo/mmu/storage/stack/README.md |  49 +++++++++
 tools/demo/mmu/storage/stack/stack.c   | 139 +------------------------
 2 files changed, 54 insertions(+), 134 deletions(-)
 create mode 100644 tools/demo/mmu/storage/stack/README.md

diff --git a/tools/demo/mmu/storage/stack/README.md b/tools/demo/mmu/storage/stack/README.md
new file mode 100644
index 0000000..849a2c4
--- /dev/null
+++ b/tools/demo/mmu/storage/stack/README.md
@@ -0,0 +1,49 @@
+Stack
+---------------------------------------------------
+
+![Stack](https://raw.githubusercontent.com/EmulateSpace/PictureSet/master/BiscuitOS/kernel/MMU000000.png)
+  
+The stack (see Figure) is a contiguous array of memory locations.
+It is contained in a segment and identified by the segment selector
+in the `SS` register. When using the flat memory model, the stack
+can be located anywhere in the linear address space for the program.
+A stack can be up to 4GBytes long, the maximum size of a segment.
+
+Items are placed on the stack using the `PUSH` instruction and removed
+from the stack using the `POP` instruction. When an item is pushed
+onto the stack, the processor decrements the `ESP` register, then
+writen the item at the new top of stack. When an item is poped off
+the stack, the processor reads the item from the top of stack, then
+increments the `ESP` register. In this manner, the stack grows down
+in memory (towards lesser addresses) when items are pushed on the
+stack and shrinks up (towards greater address) when the items are
+popped from the stack.
+
+A program or operating system/executive can set up many stacks.
+For example, in multitasking systems, each task can be given its
+own stack. The number of stacks in a system is limited by the
+maximum number of segments and the available physical memory.
+
+When a system sets up many stacks, only one stack - the `current stack` 
+is available at a time. The current stack is the one contained in
+the segment referenced by the `SS` register.
+
+The processor references the `SS` register automatically for all
+stack operations. For example, when the `ESP` register is used as
+a memory address, it automatically points to an address in the current
+stack. Also, the `CALL`, `RET`, `PUSH`, `POP`, `ENTER` and `LEAVE`
+instructions all perform operations on the current stack.
+
+## Setting Up a Stack
+
+  To set a stack and establish it as the current stack, the program
+  or operating system/executive must do the following:
+
+  1. Establish a stack segment.
+
+  2. Load the segment selector for the stack segment into the `SS`
+     register using a `MOV`, `POP`, or `LSS` instruction.
+
+  3. Load the stack pointer for the stack into the `ESP` register
+     using a `MOV`, `POP`, or `LSS` instruction. The `LSS` instruction
+     can be used to load the `SS` and `ESP` register in one operation. 
diff --git a/tools/demo/mmu/storage/stack/stack.c b/tools/demo/mmu/storage/stack/stack.c
index 0060da9..075972c 100644
--- a/tools/demo/mmu/storage/stack/stack.c
+++ b/tools/demo/mmu/storage/stack/stack.c
@@ -1,5 +1,5 @@
 /*
- * CS: Code selector Register
+ * Stack
  *
  * (C) 2018.06.06 BiscuitOS <buddy.zhang@aliyun.com>
  *
@@ -11,140 +11,11 @@
 
 #include <demo/debug.h>
 
-static inline unsigned long get_cs(void)
-{
-    unsigned long _v;
-
-    __asm__ ("mov %%cs, %w0" : "=r" (_v) : "0" (0));
-    return _v;
-}
-
-#ifdef CONFIG_DEBUG_SEGMENT_SELECTOR_CS
-/*
- * Parse CS segment selector
- *   A segment selector is a 16-bit identifier for a semgent(see Figure).
- *   It doesn't point directly to the segment, but instead points to the
- *   segment descriptor that defines the segment. A segment selector 
- *   contains the following items:
- *
- *   15------------------------------3----2--1--0
- *   |  Index                        | TI | RPL |
- *   --------------------------------------------     
- */
-static void parse_segment_selector_cs(void)
-{
-    unsigned short cs;
-
-    /* Obtain CS */
-    cs = get_cs();
-
-    /*
-     * The first entry of the GDT is not used by the processor. A CS segment
-     * selector that points to this entry of the GDT (that is, a segment
-     * selector with an index of 0 and the TI flag set to 0) is used as
-     * a "Null segment selector". The processor doesn't generate an 
-     * exception when a segment register (other than the CS or SS registers)
-     * is loaded with a null selector. It does, however, generate an 
-     * exception when a segment register holding a null selector is used
-     * to access memory. A null selector can be used to initialize unused
-     * segment registers. Loading the CS or SS register with a null segment
-     * selector causes a general-protection exception (#GP) to be generated.
-     */
-    if (((cs >> 0x02) & 0x01) & ((cs >> 0x03) == 0x00))
-        printk("NULL segment selecor on GDT/LDT.\n");
-
-    /*
-     * Index
-     *   (Bit 3 through 15) - Selects one of 8192 descriptors in the GDT or
-     *   LDT. The processor multiplies the index value by 8 (the number of
-     *   bytes in a segment descriptor) and adds the result to the base
-     *   address of the GDT or LDT (from the GDTR or LDTR register).
-     */
-    printk("The index of Selector: %#x\n", cs >> 0x3);
+/**/
 
-    /*
-     * TI (table indicator) flag
-     *   (Bit 2) - Specifies the descriptor table to use. Clearing this flag
-     *   selects the GDT. Setting this flag selects the current LDT.
-     */
-    if ((cs >> 2) % 0x1)
-        printk("Point Segment on LDT\n");
-    else
-        printk("Point Segment on GDT\n");
-
-    /*
-     * Request Privilege Level (RPL)
-     *   (Bit 0 and 1) - Specifies the privilege level of the selector. The
-     *   The privilege level can range from 0 to 3, with 0 being the most
-     *   privileged level. For a descriptor of the relationship of the RPL
-     *   to the CPL of the executing program (or task) and the descriptor
-     *   privilege level (DPL) of the descriptor the segment selector points
-     *   to.
-     */
-    printk("RPL: %#x\n", cs & 0x3);
-
-    /*
-     * Segment selectors are visible to application program as part of a
-     * pointer variable, but the values of selectors are usually assigned
-     * or modified by link editors or linking loaders, not application 
-     * programs.
-     */
-}
-#endif
-
-#ifdef CONFIG_DEBUG_SEGMENT_DESCRIPTOR_CS
-/*
- * parse_segment_descriptor_cs()
- *   Parse a segment descriptor for CS. The CS points a speical descriptor
- *   where locate in LDT or GDT. The segment descriptor describe
- *   base address, limit, flags and permission for current Code segment.
- *   According to TI bit on CS, we can obtain a special segment descriptor.
- *   If 'TI' is cleared, the CS points to GDT, and if it is set, the CS
- *   points to LDT.
- * 
- *   0--------------+----+-----15
- *   |     Index    | TI |      |
- *   +--------------+----+------+ 
- *          |
- *          |
- *          |
- *          |
- *          |            (TI = 1)
- *          o----o------------------------o
- *               |                        |
- *               |                        V
- *               |            0-----------+--------------------+-----
- *               |            |           |                    |
- *               |            | LDT ..... | Segment descriptor |
- *               |            |           |                    |
- *               | (TI = 0)   +-----------+--------------------+-----
- *               |
- *               V
- *   0-----------+--------------------+----
- *   |           |                    |
- *   | GDT ....  | Segment descriptor |...
- *   |           |                    |
- *   +-----------+--------------------+----
- */
-static void parse_segment_descriptor_cs(void)
+static int debug_stack(void)
 {
-    unsigned short cs;
-
-    /* Obtain CS segment selector */
-    cs = get_cs();
-    printk("CS %#x\n", cs);
-}
-#endif
-
-static int debug_cs(void)
-{
-#ifdef CONFIG_DEBUG_SEGMENT_SELECTOR_CS
-    parse_segment_selector_cs();
-#endif
-
-#ifdef CONFIG_DEBUG_SEGMENT_DESCRIPTOR_CS
-    parse_segment_descriptor_cs();
-#endif
+    printk("Hello World\n");
     return 0;
 }
-late_debugcall(debug_cs);
+late_debugcall(debug_stack);
-- 
2.17.1

