From 6fc08af75e7beab3db81f91d00f16327ce8929cb Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.zhang@aliyun.com>
Date: Thu, 2 Aug 2018 18:54:44 +0800
Subject: [PATCH 03/27] 3/6 Stack: ReadME.md

---
 tools/demo/mmu/storage/stack/README.md | 53 ++++++++++++++++++++++++++++++++++
 1 file changed, 53 insertions(+)

diff --git a/tools/demo/mmu/storage/stack/README.md b/tools/demo/mmu/storage/stack/README.md
index 849a2c4..112fc07 100644
--- a/tools/demo/mmu/storage/stack/README.md
+++ b/tools/demo/mmu/storage/stack/README.md
@@ -47,3 +47,56 @@ instructions all perform operations on the current stack.
   3. Load the stack pointer for the stack into the `ESP` register
      using a `MOV`, `POP`, or `LSS` instruction. The `LSS` instruction
      can be used to load the `SS` and `ESP` register in one operation. 
+
+## Stack Alignment
+
+  The stack pointer for a stack segment should be aligned on 16-bit(word)
+  or 32-bit (double-word) boundaries, depending on the width of the stack
+  segment. The `D` flag in the segment descriptor for the current code
+  segment sets the stack-segment width. The `PUSH` and `POP` instructions
+  use the `D` flag to determine how much to decrement or increment the
+  stack pointer on a push or pop operation, respectively. When the stack
+  width is 16 bits, the stack pointer is incremented or decrement in 16-bit
+  increments. When the width is 32 bits, the stack pointer is incremented
+  or decremented in 32-bit increments. Pushing a 16-bit value onto a 32-bit
+  wide stack can result in stack misaligned (that is, the stack pointer is
+  not aligned on a double-word boundary). One exception to this rule is 
+  when the contents of a segment of segment reigster (a 16-bit segment
+  selector) are pushed onto a 32-bit wide stack. Here, the processor
+  automatically aligns the stack pointer to the next 32-bit boundary.
+
+  ```
+     Stack
+
+     +------------------------+
+     |                        |
+     +------------------------+
+     |                        |
+     +------------------------+
+     |                        |
+     +------------------------+
+     |                        |
+     +------------------------+
+     |                        |
+     +------------------------+<---- ESP
+
+     Stack 
+
+     +------------------------+
+     |                        |
+     +------------------------+
+     |                        |
+     +------------------------+
+     |                        |
+     +------------------------+
+     |                        |
+     +------------------------+<---- ESP
+     |            |     CS    |
+     +------------------------+
+  ```
+
+  The processor does no check stack pointer alignment. It is the 
+  responsibility of the program, tasks, and system procedure running on
+  the processor to maintain proper alignment of stack pointers. Misalignment
+  a stack pointer can cause serious performance degradation and in some 
+  instances program failures.
-- 
1.9.1

