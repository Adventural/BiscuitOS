From 1d28b0c1b533f8ee60172739f6e8a8fd06030369 Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.d.zhang@gmail.com>
Date: Mon, 10 Sep 2018 22:23:43 +0800
Subject: [PATCH 42/44] EFLAGS -- ZF: NEG, OR, SAL, SAR, SHL, and SHR
 instructions effect ZF set and clear

---
 tools/demo/mmu/storage/register/EFLAGS/eflags.c | 253 ++++++++++++++++++++++++
 1 file changed, 253 insertions(+)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
index 4654687..5fb9adf 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/eflags.c
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -3803,6 +3803,259 @@ static __unused int eflags_ZF(void)
         printk("INC: Non-Zero -> %#x + 1 = %#x\n", CX, AX & 0xFF);
 #endif
 
+#ifdef CONFIG_DEBUG_ZF_NEG
+    /*
+     * NEG -- two's complement negation
+     *
+     * Replaces the value of operand (the destination operand) with its 
+     * two's complement. (This operation is equivalent to subtraction the 
+     * operand from 0.) The destination operand is located in a general-
+     * purpose register or a memory location.
+     *
+     * IF DEST = 0
+     *     THEN CF <---- 0;
+     *     ELSE CF <---- 0;
+     * FI
+     * DEST <---- [~(DEST)]
+     */
+    CX = 0x0;
+    __asm__ ("mov %2, %%al\n\r"
+             "neg %%al\n\r"
+             "jz ZF_SC\n\r"
+             "jnz ZF_CC\n\r"
+       "ZF_SC:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outC\n\r"
+       "ZF_CC:\n\r"
+             "mov $0, %%dx\n\r"
+        "outC:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (ZF), "=m" (AX)
+             : "m" (CX));
+    if (ZF)
+        printk("NEG: Zero -> ~(%#x) + 1 = %#x\n", CX, AX & 0xFF);
+    else
+        printk("NEG: Non-Zero -> ~(%#x) + 1 = %#x\n", CX, AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_ZF_OR
+    /*
+     * OR -- Logical inclusive OR
+     *
+     * Performs a bitwise inclusive OR operation between the destination 
+     * (first) and source (second) operands and stores the result int the
+     * destination operand location. The source operand can be an immediate,
+     * a register, or a memory location; the destination operand can be a
+     * register or a memory location. (However, two memory operands cannot
+     * be used in one instruction.) Each bit of the result of the OR 
+     * instruction is set to 0 if both corresponding bits of the first and
+     * second operands are 0; otherwise, each bit is set to 1.
+     *
+     * DEST <---- DEST OR SRC;
+     */
+    CX = 0x0;
+    DX = 0x0;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%bl\n\r"
+             "or %%bl, %%al\n\r"
+             "jz ZF_SD\n\r"
+             "jnz ZF_CD\n\r"
+       "ZF_SD:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outD\n\r"
+       "ZF_CD:\n\r"
+             "mov $0, %%dx\n\r"
+        "outD:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (ZF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (ZF)
+        printk("OR: Zero -> %#x OR %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("OR: Non-Zero -> %#x OR %#x = %#x\n", CX, DX, AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_ZF_SAL
+    /*
+     * SAL -- Shift arithmetic left
+     * 
+     * SAL r/m8, CL
+     * SAL r/m16, CL
+     * SAL r/m32, CL
+     *
+     * Shifts the bits in the first operand (destination operand) to the left
+     * by the number of bits specified in the second operand (count operand).
+     * Bits shifted beyond the destination operand boundary are first shifted
+     * into the CF flag, then discarded. At the end of the shift operation, 
+     * the CF flag contains the last bit shifted out of the destination 
+     * operand.
+     *
+     * The shift arithmetic left (SAL) and shift logical left (SHL) 
+     * instructions perform the same operation; they shift the bits in the 
+     * destination operand to the left (toward more significant bit locations).
+     * For each shift count, the most significant bit of the destination 
+     * operand is shifted into the CF flag, and the least significant bit is
+     * cleared.
+     */
+    CX = 0x40;
+    DX = 0x2;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%cl\n\r"
+             "sal %%cl, %%al\n\r"
+             "jz ZF_SE\n\r"
+             "jnz ZF_CE\n\r"
+       "ZF_SE:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outE\n\r"
+       "ZF_CE:\n\r"
+             "mov $0, %%dx\n\r"
+        "outE:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (ZF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (ZF)
+        printk("SAL: Zero -> %#x << %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("SAL: Non-Zero -> %#x << %#x = %#x\n", CX, DX, AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_ZF_SAR
+    /*
+     * SAR -- Shift arithmetic right
+     *
+     * SAR r/m8, CL
+     * SAR r/m16, CL
+     * SAR r/m32, CL
+     *
+     * Shifts the bits in the first operand (destination operand) to the right
+     * by the number of bits specified in the second operand (count operand).
+     * Bits shifted beyond the destination operand boundary are first into
+     * the CF flag, then discarded. At the end of the shift operation, the 
+     * CF flag contains the last bit shifted out of the destination operand.
+     *
+     * The shift arithmetic right (SAR) instruction shift the bits of the 
+     * bits of the destination operand to the right (toward less significant
+     * bit locations). For each shift count, the least significant bit of the
+     * destination operand is shifted into the CF flag, and the most 
+     * significant bit is either set or clear depending on the instruction
+     * type. The SAR instruction sets or clears the most significant bit to
+     * correspond to the sign (most significant bit) of the original value
+     * in the destination operand. In effect, the SAR instruction fills the
+     * empty bit position's shifted value with the sign of the unshifted value.
+     */
+    CX = 0x2;
+    DX = 0x2;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%cl\n\r"
+             "sar %%cl, %%al\n\r"
+             "jz ZF_SF\n\r"
+             "jnz ZF_CF\n\r"
+       "ZF_SF:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outF\n\r"
+       "ZF_CF:\n\r"
+             "mov $0, %%dx\n\r"
+        "outF:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (ZF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (ZF) 
+        printk("SAR: Zero -> %#x >> %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("SAR: Non-Zero -> %#x >> %#x = %#x\n", CX, DX, AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_ZF_SHL
+    /*
+     * SHL -- Shift logical Left
+     *
+     * SHL r/m8,  cl
+     * SHL r/m16, cl
+     * SHL r/m32, cl
+     *
+     * Shifts the bits in the first operand (destination operand) to the left
+     * by the number of bits specified in the second operand (count operand).
+     * Bits shifted beyond the destination operand boundary are first shifted
+     * into the CF flag, then discared. At the end of the shift operation, the
+     * CF flag contains the last bit shifted out of the destination operand.
+     * 
+     * The shift logical left (SHL) instruction perform the same operation;
+     * they shift the bits in the destination operand to the left (toward
+     * more significant bit locations). For each shift count, the most 
+     * significant bit of the destination operand is shifted into the CF flag,
+     * and the least significant bit is cleared.
+     */
+    CX = 0x40;
+    DX = 0x02;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%cl\n\r"
+             "shl %%cl, %%al\n\r"
+             "jz ZF_SG\n\r"
+             "jnz ZF_CG\n\r"
+       "ZF_SG:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outG\n\r"
+       "ZF_CG:\n\r"
+             "mov $0, %%dx\n\r"
+        "outG:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (ZF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (ZF)
+        printk("SHL: Zero -> %#x << %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("SHL: Non-Zero -> %#x << %#x = %#x\n", CX, DX, AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_ZF_SHR
+    /*
+     * SHR --- Shift logical right
+     *
+     * SHR r/m8, CL
+     * SHR r/m16, CL
+     * SHR r/m32, CL
+     *
+     * Shift the bit the first operand (destination operand) to the right by
+     * the number of bits specified in the second operand (count operand).
+     * Bits shifted beyond the destination operand boundary are first shift
+     * into the CF flag, hten discared. At the end of the shift operation, 
+     * the CF flag contains the last bit shifted out of the destination 
+     * operand.
+     *
+     * The shift logical right (SHR) instrution shift the bits of the 
+     * destination operand to the right (toward less significant bit location).
+     * For each shift count, the least significant bit of the destination
+     * operand is shifted into the CF flag, and the most significant bit is
+     * either set or cleared depending on the instruction type. 
+     */
+    CX = 0x4;
+    DX = 0x2;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%cl\n\r"
+             "shr %%cl, %%al\n\r"
+             "jz ZF_SH\n\r"
+             "jnz ZF_CH\n\r"
+       "ZF_SH:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outH\n\r"
+       "ZF_CH:\n\r"
+             "mov $0, %%dx\n\r"
+        "outH:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (ZF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (ZF)
+        printk("SHR: Zero -> %#x >> %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("SHR: Non-Zero -> %#x >> %#x = %#x\n", CX, DX, AX & 0xFF);
+#endif
+
     return 0;
 }
 
-- 
2.7.4

