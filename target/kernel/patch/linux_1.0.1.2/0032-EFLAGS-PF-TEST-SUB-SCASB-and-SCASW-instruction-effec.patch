From ebaf1f8fb6246b9bfe30ff102d7edb3684dfed16 Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.d.zhang@gmail.com>
Date: Sun, 2 Sep 2018 17:22:30 +0800
Subject: [PATCH 32/34] EFLAGS -- PF: TEST, SUB, SCASB, and SCASW instruction
 effect PF set and clear

---
 .../demo/mmu/storage/register/EFLAGS/Kconfig  |  25 ++
 .../demo/mmu/storage/register/EFLAGS/eflags.c | 229 ++++++++++++++++++
 2 files changed, 254 insertions(+)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/Kconfig b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
index d99a019..1c8b028 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/Kconfig
+++ b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
@@ -262,6 +262,31 @@ config DEBUG_PF_SHL
 	help
 	  Shift logical left for Parity Bit.
 
+config DEBUG_PF_SBB
+	bool "SBB     Integer subtraction with borrow"
+	help
+	  Subtraction with borrow for Parity Bit.
+
+config DEBUG_PF_SCASB
+	bool "SCASB   Scan string in byte"
+	help
+	  Scanning string in byte for Parity Bit.
+
+config DEBUG_PF_SCASW
+	bool "SCASW   Scan string in word"
+	help
+	  Scanning string in word for Parity Bit.
+
+config DEBUG_PF_SUB
+	bool "SUB     Subtract"
+	help
+	  Subtract for Parity Bit.
+
+config DEBUG_PF_TEST
+	bool "TEST    Logical Compare"
+	help
+	  Logical compare for Parity Bit.
+
 endif # DEBUG_EFLAGS_PF
 
 endif # DEBUG_REGISTER_EFLAGS
diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
index 6c522c5..766f123 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/eflags.c
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -1759,6 +1759,7 @@ static __unused int eflags_CF(void)
  */
 static __unused int eflags_PF(void)
 {
+    unsigned char  __unused AL;
     unsigned short __unused AX;
     unsigned short __unused BX;
     unsigned short __unused CX;
@@ -2811,6 +2812,234 @@ static __unused int eflags_PF(void)
         printk("SHL: odd number -> %#x << %#x = %#x\n", CX, DX, AX & 0xFF);
 #endif
 
+#ifdef CONFIG_DEBUG_PF_SBB
+    /*
+     * SBB -- Integer Subtraction with Borrow
+     *
+     * SBB AL, imm8
+     * SBB AX, imm16
+     * SBB EAX, imm32
+     *
+     * Adds the source operand (second operand) and the carry (CF) flag, and
+     * subtracts the result from the destination operand (first operand). 
+     * The result of the subtraction is stored in the destination operand. 
+     * The destination operand can be register or a memory location; the
+     * source operand can be an immediate, a register, or a memory location.
+     * (However, two memory operands cannot be used in one instruction.) The
+     * state of the CF flag represents a borrow from a previous subtraction.
+     *
+     * When an immediate value is used as an operand, it is sign-extended to 
+     * the length of the detination operand format.
+     *
+     * The SBB instruction does not distinguish between signed or unsigned
+     * operands. Instead, the processor evaluates the result for both data
+     * types and sets the OF and CF flags to indicate a borrow in the signed
+     * or unsigned result, respectively. The SF flag flag indicates the
+     * sign of the sign of the signed result.
+     *
+     * The SBB instruction is usually executed as part of a multibyte or 
+     * multiword subtraction in which a SUB instruction is followed by a
+     * SBB instruction.
+     *
+     * DEST <---- (DEST  - (SRC + CF))
+     *
+     * The OF, SF, ZF, AF, PF, and CF flags are set according to the result.
+     */
+    CX = 0x10;
+    DX = 0x3;
+    __asm__ ("stc\n\r"
+             "mov %2, %%al\n\r"
+             "mov %3, %%bl\n\r"
+             "sbb %%bl, %%al\n\r"
+             "jp PF_SL\n\r"
+             "jnp PF_CL\n\r"
+       "PF_SL:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outL\n\r"
+       "PF_CL:\n\r"
+             "mov $0, %%dx\n\r"
+        "outL:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (PF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (PF)
+        printk("SBB: even number -> %#x - %#x - CF= %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("SBB: odd number -> %#x - %#x -CF = %#x\n", CX, DX, AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_PF_SCASB
+    /*
+     * SCASB -- Scan String in Byte
+     *
+     * The no-operands form of the instruction uses a short form of SCAS. 
+     * Again, ES:(E)DI is assumed to be the memory operand and AL, AX, or EAX
+     * is assumed to be the register operand. The size of operands is 
+     * selected by the mnemonic: SCASB (byte comparision).
+     * 
+     * After the comparison, the (EDI) register is increamented or decremented
+     * automatically according to the setting of the DF flag in the EFLAGS
+     * register. If the DF flag is 0, the (E)DI register is increamented; if
+     * the DF flag is 1, the (E)DI register is decremented. The register is
+     * increamented or decremented by 1 for byte operations.
+     *
+     * SCASB can be preceded by the REP prefix for block comparisions of ECX
+     * bytes. Often, however, these instructions will be used in a LOOP 
+     * construct that takes some action based on the setting of status flags.
+     */
+    ECX = (unsigned int)(unsigned long)&"Hello World"[0];
+    AL  = (unsigned char)(unsigned long)'d';
+    CX  = 15;
+    __asm__ ("movl %2, %%edi\n\r"
+             "mov  %3, %%al\n\r"
+             "mov  %4, %%cx\n\r"
+             "cld\n\r"
+             "repne scasb\n\r"
+             "jp PF_SM\n\r"
+             "jnp PF_CM\n\r"
+       "PF_SM:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outM\n\r"
+       "PF_CM:\n\r"
+             "mov $0, %%dx\n\r"
+        "outM:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%cx, %1"
+             : "=m" (PF), "=m" (AX)
+             : "m" (ECX), "m" (AL), "m" (CX)); 
+    if (PF)
+        printk("SCASB: even number ->");
+    else
+        printk("SCASW: odd number ->");
+
+    printk("\"%s\" Scan \"%c\" in %d\n", 
+           (char *)(unsigned long)ECX, AL, CX - AX - 1);
+#endif
+
+#ifdef CONFIG_DEBUG_PF_SCASW
+    /*
+     * SCASW -- Scan String in Word
+     *
+     * The no-operands form of the instruction uses a short form of SCAS. 
+     * Again, ES:(E)DI is assumed to be the memory operand and AL, AX, or EAX
+     * is assumed to be the register operand. The size of operands is 
+     * selected by the mnemonic: SCASW (word comparision).
+     * 
+     * After the comparison, the (EDI) register is increamented or decremented
+     * automatically according to the setting of the DF flag in the EFLAGS
+     * register. If the DF flag is 0, the (E)DI register is increamented; if
+     * the DF flag is 1, the (E)DI register is decremented. The register is
+     * increamented or decremented by 1 for byte operations.
+     *
+     * SCASW can be preceded by the REP prefix for block comparisions of ECX
+     * word. Often, however, these instructions will be used in a LOOP 
+     * construct that takes some action based on the setting of status flags.
+     */
+    ECX = (unsigned int)(unsigned long)&"Hello World"[0];
+    AX  = (('o' << 8) | 'W');
+    CX  = 15;
+    __asm__ ("movl %2, %%edi\n\r"
+             "mov %3, %%ax\n\r"
+             "mov %4, %%cx\n\r"
+             "cld\n\r"
+             "repne scasw\n\r"
+             "jp PF_SN\n\r"
+             "jnp PF_CN\n\r"
+       "PF_SN:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outN\n\r"
+       "PF_CN:\n\r"
+             "mov $0, %%dx\n\r"
+        "outN:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%cx, %1"
+             : "=m" (PF), "=m" (DX)
+             : "m" (ECX), "m" (AX), "m" (CX));
+    if (PF)
+        printk("SCASW: even number ->");
+    else
+        printk("SCASW: odd number ->");
+
+    
+    printk("\"%s\" Scan \"%c%c\" in word %d\n", 
+            (char *)(unsigned long)ECX,
+            AX & 0xFF, AX >> 8,
+            CX - DX - 1);
+#endif
+
+#ifdef CONFIG_DEBUG_PF_SUB
+    /*
+     * SUB -- Subtract
+     *
+     * SUB AL, imm8
+     * SUB AX, imm16
+     * SUB EAX, imm32
+     *
+     * Subracts the second operand (source operand) from the first operand (
+     * destination operand) and stores the result in the destination operand.
+     * The destination operand can be a register or a memory location; the 
+     * source operand can be an immediate, register, or memory location. (
+     * However, two memory operands cannot be used in one instruction.) When
+     * an immediate value is used as an operand, it is sign-extended to the
+     * length of the destination operand format.
+     *
+     * The SUB instruction performs integer subtraction. It evaluates the 
+     * result for both signed and unsigned integer operands and sets the
+     * OF and CF flags to indicate an overflow in the signed or unsigned
+     * result, respectively. The SF flag indicates the sign of the signed
+     * result.
+     *
+     * DEST <---- (DEST - SRC)
+     *
+     * The OF, SF, ZF, AF, PF, and CF flags are set according to the result.
+     */
+    CX = 0x9;
+    DX = 0x3;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%bl\n\r"
+             "sub %%bl, %%al\n\r"
+             "jp PF_SO\n\r"
+             "jnp PF_CO\n\r"
+       "PF_SO:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outO\n\r"
+       "PF_CO:\n\r"
+             "mov $0, %%dx\n\r"
+        "outO:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (PF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (PF)
+        printk("SUB: even number -> %#x - %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("SUB: odd number -> %#x - %#x = %#x\n", CX, DX, AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_PF_TEST
+    CX = 0x7;
+    DX = 0x3;
+    __asm__ ("mov %1, %%al\n\r"
+             "mov %2, %%bl\n\r"
+             "test %%bl, %%al\n\r"
+             "jp PF_SP\n\r"
+             "jnp PF_CP\n\r"
+       "PF_SP:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outP\n\r"
+       "PF_CP:\n\r"
+             "mov $0, %%dx\n\r"
+        "outP:\n\r"
+             "mov %%dx, %0"
+             : "=m" (PF)
+             : "m" (CX), "m" (DX));
+    if (PF)
+        printk("TEST: even number -> %#x TEST %#x = %#x\n", CX, DX, CX & DX);
+    else
+        printk("TEST: odd number -> %#x TEST %#x = %#x\n", CX, DX, CX & DX);
+#endif
+
     return 0;
 }
 
-- 
2.17.1

