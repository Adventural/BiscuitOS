From 4bdef9b103a82aed17e5838c05948a2cf4c960d9 Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.zhang@aliyun.com>
Date: Mon, 3 Sep 2018 20:02:26 +0800
Subject: [PATCH 33/34] EFLAGS -- PF: JP, JNP, JPE, and JPO instructions effect
 PF set and clear

---
 .../demo/mmu/storage/register/EFLAGS/Kconfig  |  20 ++++
 .../demo/mmu/storage/register/EFLAGS/eflags.c | 103 +++++++++++++++++-
 2 files changed, 122 insertions(+), 1 deletion(-)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/Kconfig b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
index 1c8b028..f862694 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/Kconfig
+++ b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
@@ -232,6 +232,26 @@ config DEBUG_PF_INC
 	help
 	  Debug INC instruction for Parity Bit.
 
+config DEBUG_PF_JP
+	bool "JP      Jump short if parity"
+	help
+	  Debug JP instruction for Parity Bit.
+
+config DEBUG_PF_JPE
+	bool "JPE     Jump short if parity even (PF = 1)"
+	help
+	  Debug JPE instruction for Parity Bit.
+
+config DEBUG_PF_JPO
+	bool "JPO     Jump short if parity odd (PF = 0)"
+	help
+	  Debug JPO instruction for Parity Bit.
+
+config DEBUG_PF_JNP
+	bool "JNP     Jump short if not parity"
+	help
+	  Debug JNP instruction for Parity Bit.
+
 config DEBUG_PF_NEG
 	bool "NEG     Two's complement negation"
 	help
diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
index 766f123..4b40df6 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/eflags.c
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -1,7 +1,8 @@
 /*
  * EFLAGS: Current Status Register of Processor
  *
- * (C) 2018.08.10 BiscuitOS <buddy.zhang@aliyun.com>
+ * (C) 2018.08.10 BuddyZhang1 <buddy.zhang@aliyun.com>
+ * (C) 2018.09.03 BiscuitOS   <buddy.biscuitos@gmail.com>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -3018,6 +3019,14 @@ static __unused int eflags_PF(void)
 #endif
 
 #ifdef CONFIG_DEBUG_PF_TEST
+    /*
+     * TEST -- Logical Compare
+     *
+     * Computes the bit-wise logical AND of first operand (source 1 operand)
+     * and second operand (source 2 operand) and sets the SF, ZF, and PF
+     * status flags according to the result. The result is then discarded.
+     *
+     */
     CX = 0x7;
     DX = 0x3;
     __asm__ ("mov %1, %%al\n\r"
@@ -3040,6 +3049,98 @@ static __unused int eflags_PF(void)
         printk("TEST: odd number -> %#x TEST %#x = %#x\n", CX, DX, CX & DX);
 #endif
 
+#if defined CONFIG_DEBUG_PF_JP || defined CONFIG_DEBUG_PF_JNP
+    /*
+     * JP  -- Jump short if parity (PF = 1)
+     * JNP -- Jump short if not parity (PF = 0)
+     *
+     * Checks the state of one or more of the status flags in the EFLAGS
+     * register (PF) and, if the flags are in the specified state (condition),
+     * performs a jump tp the target instruction specified by the destination
+     * operand. A condition code (cc) is associated with each instruction
+     * to indicate the condition being tested for. If the condition is not 
+     * statisfied, the jump is not performed and execution continues with
+     * instruction the Jcc instruction.
+     *
+     * The target instruction is specified with a relative offset (a signed 
+     * offset relative to the current value of the instruction pointer in
+     * the EIP register). A relative offset (rel8, rel16, or rel32) is 
+     * gernerally specified as a label in assembly code, but at the machine 
+     * level, it is encoded as a signed, 8-bit or 32-bit immediate value,
+     * which is added to the instruction pointer. Instruction coding is most
+     * efficient for offsets of -128 to +127. If the operand-size attribute
+     * is 16, then upper two bytes of the EIP register are cleared, 
+     * resulting in a maximum instruction pointer size of 16 bits.
+     */
+    CX = 0x7;
+    DX = 0x3;
+    __asm__ ("mov %1, %%al\n\r"
+             "mov %2, %%bl\n\r"
+             "test %%bl, %%al\n\r"
+             "jp PF_SP\n\r"
+             "jnp PF_CP\n\r"
+       "PF_SP:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outP\n\r"
+       "PF_CP:\n\r"
+             "mov $0, %%dx\n\r"
+        "outP:\n\r"
+             "mov %%dx, %0"
+             : "=m" (PF)
+             : "m" (CX), "m" (DX));
+    if (PF)
+        printk("JP/JNP: even number -> %#x TEST %#x = %#x\n", CX, DX, CX & DX);
+    else
+        printk("JP/JNP: odd number -> %#x TEST %#x = %#x\n", CX, DX, CX & DX);
+
+#endif
+
+#if defined CONFIG_DEBUG_PF_JPE || defined CONFIG_DEBUG_PF_JPO
+    /*
+     * JPE -- Jump short if parity even (PF = 1)
+     * JPO -- Jump short if parity odd (PF = 0)
+     *
+     * Checks the state of one or more of the status flags in the EFLAGS
+     * register (PF) and, if the flags are in the specified state (condition),
+     * performs a jump tp the target instruction specified by the destination
+     * operand. A condition code (cc) is associated with each instruction
+     * to indicate the condition being tested for. If the condition is not 
+     * statisfied, the jump is not performed and execution continues with
+     * instruction the Jcc instruction.
+     *
+     * The target instruction is specified with a relative offset (a signed 
+     * offset relative to the current value of the instruction pointer in
+     * the EIP register). A relative offset (rel8, rel16, or rel32) is 
+     * gernerally specified as a label in assembly code, but at the machine 
+     * level, it is encoded as a signed, 8-bit or 32-bit immediate value,
+     * which is added to the instruction pointer. Instruction coding is most
+     * efficient for offsets of -128 to +127. If the operand-size attribute
+     * is 16, then upper two bytes of the EIP register are cleared, 
+     * resulting in a maximum instruction pointer size of 16 bits.
+     */
+    CX = 0x7;
+    DX = 0x3;
+    __asm__ ("mov %1, %%al\n\r"
+             "mov %2, %%bl\n\r"
+             "test %%bl, %%al\n\r"
+             "jpe PF_SP\n\r"
+             "jpo PF_CP\n\r"
+       "PF_SP:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outP\n\r"
+       "PF_CP:\n\r"
+             "mov $0, %%dx\n\r"
+        "outP:\n\r"
+             "mov %%dx, %0"
+             : "=m" (PF)
+             : "m" (CX), "m" (DX));
+    if (PF)
+        printk("JPE/JPO: even number -> %#x TEST %#x = %#x\n", CX, DX, CX & DX);
+    else
+        printk("JPE/JPO: odd number -> %#x TEST %#x = %#x\n", CX, DX, CX & DX);
+
+#endif
+
     return 0;
 }
 
-- 
2.17.1

