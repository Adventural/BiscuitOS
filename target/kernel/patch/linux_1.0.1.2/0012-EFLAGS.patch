From 7069685b54c4a83516c1b7b3a2deefc654db11c8 Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.d.zhang@gmail.com>
Date: Sun, 12 Aug 2018 18:42:58 +0800
Subject: [PATCH 12/27] EFLAGS

---
 tools/demo/mmu/storage/register/EFLAGS/Kconfig   |  36 +++++
 tools/demo/mmu/storage/register/EFLAGS/Makefile  |   1 +
 tools/demo/mmu/storage/register/EFLAGS/README.md |  18 +++
 tools/demo/mmu/storage/register/EFLAGS/eflags.c  | 196 +++++++++++++++++++++++
 tools/demo/mmu/storage/register/Kconfig          |   3 +
 tools/demo/mmu/storage/register/Makefile         |   1 +
 tools/demo/mmu/storage/register/README.md        |  42 +++++
 7 files changed, 297 insertions(+)
 create mode 100644 tools/demo/mmu/storage/register/EFLAGS/Kconfig
 create mode 100644 tools/demo/mmu/storage/register/EFLAGS/Makefile
 create mode 100644 tools/demo/mmu/storage/register/EFLAGS/README.md
 create mode 100644 tools/demo/mmu/storage/register/EFLAGS/eflags.c

diff --git a/tools/demo/mmu/storage/register/EFLAGS/Kconfig b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
new file mode 100644
index 0000000..052c0ec
--- /dev/null
+++ b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
@@ -0,0 +1,36 @@
+#
+# EFLAGS: Current Status register of processor
+#
+
+menu "EFLAGS:   Current status register of processor"
+
+config DEBUG_REGISTER_EFLAGS
+	bool "EFLAGS: Current status register of processor"
+	help
+	  Debug EFLAGS Register.
+
+if DEBUG_REGISTER_EFLAGS
+
+config DEBUG_EFLAGS_LAHF
+	bool "EFLAGS: Load Status Flags into AH Register"
+	help
+	  Obtain EFLAGS register via "LAHF" instrcution.
+
+config DEBUG_EFLAGS_SAHF
+	bool "EFLAGS: Store AH into Flags"
+	help
+	  Store AH into EFLAGS via "SAHF" instruction.
+
+config DEBUG_EFLAGS_PUSHF
+	bool "EFLAGS: Push EFLAGS Register onto the Stack"
+	help
+	  Push EFLAGS register onto the stack.
+
+config DEBUG_EFLAGS_POPF
+	bool "EFLAGS: Pop Stack into EFLAGS Register"
+	help
+	  Push value onto the EFLAGS register.
+
+endif
+
+endmenu
diff --git a/tools/demo/mmu/storage/register/EFLAGS/Makefile b/tools/demo/mmu/storage/register/EFLAGS/Makefile
new file mode 100644
index 0000000..f9cf4ed
--- /dev/null
+++ b/tools/demo/mmu/storage/register/EFLAGS/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_DEBUG_REGISTER_EFLAGS)     += eflags.o
diff --git a/tools/demo/mmu/storage/register/EFLAGS/README.md b/tools/demo/mmu/storage/register/EFLAGS/README.md
new file mode 100644
index 0000000..73585f3
--- /dev/null
+++ b/tools/demo/mmu/storage/register/EFLAGS/README.md
@@ -0,0 +1,18 @@
+EFLAGS: Current Status Register of Processor
+---------------------------------------------------------------------
+
+```
+EAX/AX/AH/AL Register
+
+    31                       16 15          8 7           0 16-bit  32-bit
+    +--------------------------+-------------+------------+
+    |                          |      AH     |     AL     |   AX     EAX
+    +--------------------------+-------------+------------+
+
+```
+
+
+
+## link
+
+  [Intel Architectures Software Developer's Manual: Combined Volumes: 1 -- Chapter 3 Basic Execution Environment: 3.4 Basic Program Execution Register](https://software.intel.com/en-us/articles/intel-sdm)
diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
new file mode 100644
index 0000000..7142ea5
--- /dev/null
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -0,0 +1,196 @@
+/*
+ * EFLAGS: Current Status Register of Processor
+ *
+ * (C) 2018.08.10 BiscuitOS <buddy.zhang@aliyun.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/kernel.h>
+#include <demo/debug.h>
+
+
+/*
+ * LAHF -- Load Status Flags into AH Register
+ *
+ *   LAHE
+ *
+ *   This instruction executes as described above in compatibility mode and
+ *   legacy mode.
+ *
+ *   IF instrcution LAHF
+ *       THEN
+ *           AH <--- EFLAGS(SF:ZF:0:AF:0:PF:1:CF)
+ *   FI
+ *
+ *   The state of the flags in the EFLAGS register is not affected.
+ */
+static __unused int eflags_LAHF(void)
+{
+    unsigned char AH;
+
+    /*
+     * Layout of AH register
+     *
+     * +-----+----------------------------------------+
+     * | Bit | Descriptor                             |
+     * +-----+----------------------------------------+
+     * | 0   | CF flag                                |
+     * +-----+----------------------------------------+
+     * | 1   | Reserved as 1                          |
+     * +-----+----------------------------------------+
+     * | 2   | PF flag                                |
+     * +-----+----------------------------------------+
+     * | 3   | Reserved as 0                          |
+     * +-----+----------------------------------------+
+     * | 4   | AF flag                                |
+     * +-----+----------------------------------------+
+     * | 5   | Reserved as 0                          |
+     * +-----+----------------------------------------+
+     * | 6   | ZF flag                                |
+     * +-----+----------------------------------------+
+     * | 7   | SF flag                                |
+     * +-----+----------------------------------------+
+     */
+    __asm__ ("lahf\n\r"
+             "mov %%ah, %0" : "=m" (AH) :);
+    printk("EFLAGS: LAHF to AH: %#x\n", AH);
+
+    return 0;
+}
+
+/*
+ * SAHF -- Store AH into Flags
+ *
+ *   SAHF
+ *
+ *   Loads the SF, ZF, AF, PF, and CF flags of the EFLAGS register with value
+ *   from the corresponding bits in the AH register (bit 7, 6, 4, 2, and 0,
+ *   respectively). Bit 1, 3, and 5 of register AH are ignored; the
+ *   corresponding reserved bits (1, 3, and 5) in the EFLAGS register remain.
+ *
+ *   IF instrcution SAHF
+ *       THEN
+ *           EFLAGS(SF:ZF:0:AF:0:PF:1:CF) <---- AH
+ *   FI
+ *
+ *   The SF, Zf, AF, PF, and CF flags are loaded with values from the AH
+ *   register. Bits 1, 3, and 5 of the EFLAGS register are unaffected, with
+ *   values remaining 1, 0, and 0, respectively.
+ */
+static __unused int eflags_SAHF(void)
+{
+    unsigned char AH;
+
+    __asm__ ("lahf\n\r"
+             "mov %%ah, %0" : "=m" (AH) :);
+
+    /*
+     * Layout of AH register
+     *
+     * +-----+----------------------------------------+
+     * | Bit | Descriptor                             |
+     * +-----+----------------------------------------+
+     * | 0   | CF flag                                |
+     * +-----+----------------------------------------+
+     * | 1   | Reserved as 1                          |
+     * +-----+----------------------------------------+
+     * | 2   | PF flag                                |
+     * +-----+----------------------------------------+
+     * | 3   | Reserved as 0                          |
+     * +-----+----------------------------------------+
+     * | 4   | AF flag                                |
+     * +-----+----------------------------------------+
+     * | 5   | Reserved as 0                          |
+     * +-----+----------------------------------------+
+     * | 6   | ZF flag                                |
+     * +-----+----------------------------------------+
+     * | 7   | SF flag                                |
+     * +-----+----------------------------------------+
+     */
+    __asm__ ("sahf" :: "a" (AH));
+    return 0;
+}
+
+/*
+ * PUSHF -- Push EFLAGS Register onto the Stack
+ *
+ *   PUSHF
+ *
+ *   Decrements the stack pointer by 4 (if the current operand-size attribute
+ *   is 32) and pushes the entire contents of the EFLAGS register onto the 
+ *   stack, or decrements the stack pointer by 2 (if the operand-size 
+ *   attribute is 16) and pushes the lower 16 bits of the EFLAGS register (
+ *   that is, the EFLAGS register) onto the stack. These instructions reverse 
+ *   the operation of the POPF instructions.
+ *
+ *   When copying the entire EFLAGS register to the stack, the VM and RF flags
+ *   (bit 16 and bit 17) are not copied; instead, the values for these flags
+ *   are cleared in the EFLAGS image stored on the stack.
+ *
+ *   The PUSHF (push flags) mnemonics reference the same opcode. The PUSHF
+ *   instrcution is intended for use when the operand-size attribute is 16
+ *   and the PUSHFD instruction for when the operand-size attribute is 32.
+ *   Some assemblers may force the operand size to 16 when PUSHF is used
+ *   and to 32 when PUSHFD is used. Others may treat these mnemonics as
+ *   synonyms (PUSHF/PUSHFD) and used the current setting of the operand-size
+ *   attribute to determine the size of values to be pushed from the stack,
+ *   regardless of the mnemonic used.
+ */
+static __unused int eflags_PUSHF(void)
+{
+    unsigned int EFLAGS;
+
+    __asm__ ("pushf\n\r"
+             "popl %%eax" : "=a" (EFLAGS) :);
+
+    printk("EFLAGS: %#x\n", EFLAGS);
+    return 0;
+}
+
+/*
+ * POPF -- Pop Stack into EFLAGS Register
+ *
+ *   POPF
+ *
+ *   Pops a doubleword from the top of the stack (if the current operand-size
+ *   attribute is 32) and stores the value in the EFLAGS register, or pops
+ *   a word from the top of the stack (if the operand-size attribute is 16)
+ *   and stores it in the lower 16 bits of the EFLAGS register (that is, the
+ *   EFLAGS register). These instructions reverse the operation of the PUSHF
+ *   instructions.
+ */
+static __unused int eflags_POPF(void)
+{
+    unsigned int EFLAGS;
+
+    __asm__ ("pushf\n\r"
+             "popl %%eax" : "=a" (EFLAGS) :);
+
+    __asm__ ("pushl %%eax\n\r"
+             "popfl" :: "a" (EFLAGS));
+    return 0;
+}
+
+static int debug_eflags(void)
+{
+#ifdef CONFIG_DEBUG_EFLAGS_LAHF
+    eflags_LAHF();
+#endif
+
+#ifdef CONFIG_DEBUG_EFLAGS_SAHF
+    eflags_SAHF();
+#endif
+
+#ifdef CONFIG_DEBUG_EFLAGS_PUSHF
+    eflags_PUSHF();
+#endif
+
+#ifdef CONFIG_DEBUG_EFLAGS_POPF
+    eflags_POPF();
+#endif
+
+    return 0;
+}
+late_debugcall(debug_eflags);
diff --git a/tools/demo/mmu/storage/register/Kconfig b/tools/demo/mmu/storage/register/Kconfig
index 4a628e3..8398b58 100644
--- a/tools/demo/mmu/storage/register/Kconfig
+++ b/tools/demo/mmu/storage/register/Kconfig
@@ -64,6 +64,9 @@ source "tools/demo/mmu/storage/register/FS/Kconfig"
 # SS Register
 source "tools/demo/mmu/storage/register/SS/Kconfig"
 
+# EFLAGS Register
+source "tools/demo/mmu/storage/register/EFLAGS/Kconfig"
+
 endif
 
 endmenu
diff --git a/tools/demo/mmu/storage/register/Makefile b/tools/demo/mmu/storage/register/Makefile
index 9707087..42255c4 100644
--- a/tools/demo/mmu/storage/register/Makefile
+++ b/tools/demo/mmu/storage/register/Makefile
@@ -16,3 +16,4 @@ obj-$(CONFIG_DEBUG_REGISTER_SS)         += SS/
 obj-$(CONFIG_DEBUG_REGISTER_ES)         += ES/
 obj-$(CONFIG_DEBUG_REGISTER_GS)         += GS/
 obj-$(CONFIG_DEBUG_REGISTER_FS)         += FS/
+obj-$(CONFIG_DEBUG_REGISTER_EFLAGS)     += EFLAGS/
diff --git a/tools/demo/mmu/storage/register/README.md b/tools/demo/mmu/storage/register/README.md
index 1479e67..d25d76d 100644
--- a/tools/demo/mmu/storage/register/README.md
+++ b/tools/demo/mmu/storage/register/README.md
@@ -306,3 +306,45 @@ follow:
   find the stack segment. Unlike the `CS` register, the `SS` register can
   be loaded explicitly, which permits application program to set up multiple
   stacks and switch among them.
+
+## EFLAGS
+
+  The 32-bit `EFLAGS` register contains a group of status flags, a control 
+  flag, and a group of system flags. Figure defines the flags within this 
+  register. Following initialization of the processor (either by asserting
+  the `RESET` pin or the `INIT` pin), the start of the `EFLAGS` register
+  is 0x00000002H. Bits 1,3,5,15, and 22 through 31 of this regsiter are 
+  reserved. Software should not use or depend on the states of any of these
+  bits.
+
+  Some of the flags in the `EFLAGS` register can be modified directly, using
+  special-purpose instruction (described in the following sections). There
+  are no instructions that allow the whole register to be examined or modified
+  directly.
+
+  The following instrcution can be used to move groups of flag to and from
+  the procedure stack or the `EAX` register: `LAHF`, `SAHF`, `PUSHF`, `PUSHFD`,
+  `POPF`, and `POPFD`. After the contents of the `EFLAGS` register have been
+  transferred to the procedure stack or `EAX` register, the flags can be 
+  examined and modified using the processor's bit manipulation instructions (
+  `BT`, `BTS`, `BTR`, and `BTC`).
+
+  When suspending a task (using the processor's multitasking facilities), the
+  processor automatically saves the state of the `EFLAGS` register in the task
+  state segment (TSS) for the task being suspend. When binding itself to a new
+  task, the processor loads the `EFLAGS` register with data from the new
+  task's `TSS`.
+
+  When a call is made to an interrupt or exception handler procedure, the 
+  processor automatically saves the state of the `EFLAGS` registers on the 
+  procedure stack. When an interrupt or exception is handled with a task 
+  switch, the state of the `EFLAGS` register is saved in the `TSS` for the 
+  task being suspended.
+
+  ![EFLAGS Register](https://github.com/EmulateSpace/PictureSet/blob/master/BiscuitOS/kernel/MMU000001.png)
+
+  As the `IA-32` Architecture has evolved, flags have been added to the 
+  `EFLAGS` register, but the function and placement of existing flags have
+  remained the same from one family of the `IA-32` processor to the next.
+  As a result, code that accesses or modifies these flags for one family
+  `IA-32` processors works as expected when run on later families of processor.
-- 
1.9.1

