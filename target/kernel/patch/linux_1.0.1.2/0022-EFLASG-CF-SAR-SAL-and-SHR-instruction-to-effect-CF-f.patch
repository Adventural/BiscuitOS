From 735a5bdc006e44b0dab886e60de914ac314b07d4 Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.d.zhang@gmail.com>
Date: Wed, 15 Aug 2018 20:38:34 +0800
Subject: [PATCH 22/25] EFLASG -- CF: SAR, SAL and SHR instruction to effect CF
 flag

---
 .../demo/mmu/storage/register/EFLAGS/Kconfig  |  15 +
 .../demo/mmu/storage/register/EFLAGS/eflags.c | 287 ++++++++++++++++++
 2 files changed, 302 insertions(+)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/Kconfig b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
index c0c2ad1..d6d3370 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/Kconfig
+++ b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
@@ -123,6 +123,21 @@ config DEBUG_CF_SHL
 	help
 	  Shift logical left.
 
+config DEBUG_CF_SHR
+	bool "SHR     Shift logical right"
+	help
+	  Shift logical right.
+
+config DEBUG_CF_SAL
+	bool "SAL     Shift arithmetic left"
+	help
+	  Shift arithmetic left.
+
+config DEBUG_CF_SAR
+	bool "SAR     Shift arithmetic right"
+	help
+	  Shift arithmetic right.
+
 endif # DEBUG_EFLAGS_CF
 
 endif
diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
index aae6fef..8197803 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/eflags.c
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -1083,6 +1083,12 @@ static __unused int eflags_CF(void)
      * Bits shifted beyond the destination operand boundary are first shifted
      * into the CF flag, then discared. At the end of the shift operation, the
      * CF flag contains the last bit shifted out of the destination operand.
+     * 
+     * The shift logical left (SHL) instruction perform the same operation;
+     * they shift the bits in the destination operand to the left (toward
+     * more significant bit locations). For each shift count, the most 
+     * significant bit of the destination operand is shifted into the CF flag,
+     * and the least significant bit is cleared.
      */
 
     /* SHL r/m8, CL */
@@ -1155,6 +1161,287 @@ static __unused int eflags_CF(void)
         printk("SHL 32: CF has cleared on %#x << %#x = %#x\n", ECX, EDX, EAX);
 #endif
 
+#ifdef CONFIG_DEBUG_CF_SHR
+    /*
+     * SHR --- Shift logical right
+     *
+     * SHR r/m8, CL
+     * SHR r/m16, CL
+     * SHR r/m32, CL
+     *
+     * Shift the bit the first operand (destination operand) to the right by
+     * the number of bits specified in the second operand (count operand).
+     * Bits shifted beyond the destination operand boundary are first shift
+     * into the CF flag, hten discared. At the end of the shift operation, 
+     * the CF flag contains the last bit shifted out of the destination 
+     * operand.
+     *
+     * The shift logical right (SHR) instrution shift the bits of the 
+     * destination operand to the right (toward less significant bit location).
+     * For each shift count, the least significant bit of the destination
+     * operand is shifted into the CF flag, and the most significant bit is
+     * either set or cleared depending on the instruction type. 
+     */
+
+    /* SHR r/m8, CL */
+    CX = 0x03;
+    DX = 0x01;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%cl\n\r"
+             "shr %%cl, %%al\n\r"
+             "jc CF_SET21\n\r"
+             "jnc CF_CLEAR21\n\r"
+    "CF_SET21:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out21\n\r"
+  "CF_CLEAR21:\n\r"
+             "mov $0, %%bx\n\r"
+       "out21:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (CF)
+        printk("SHR  8: CF has set on %#x >> %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("SHR  8: CF has clear on %#x >> %#x = %#x\n",
+                                         CX, DX, AX & 0xFF);
+    /* SHR r/m16, CL */
+    CX = 0x101;
+    DX = 0x1;
+    __asm__ ("mov %2, %%ax\n\r"
+             "mov %3, %%cl\n\r"
+             "shr %%cl, %%ax\n\r"
+             "jc CF_SET22\n\r"
+             "jnc CF_CLEAR22\n\r"
+    "CF_SET22:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out22\n\r"
+  "CF_CLEAR22:\n\r"
+             "mov $0, %%bx\n\r"
+       "out22:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (CF)
+        printk("SHR 16: CF has set on %#x >> %#x = %#x\n", CX, DX, AX);
+    else
+        printk("SHR 16: CF has cleared on %#x >> %#x = %#x\n", CX, DX, AX);
+    
+    /* SHR r/m32, CL */
+    ECX = 0x1000001;
+    EDX = 0x1;
+    __asm__ ("mov %2, %%eax\n\r"
+             "mov %3, %%cl\n\r"
+             "shrl %%cl, %%eax\n\r"
+             "jc CF_SET23\n\r"
+             "jnc CF_CLEAR23\n\r"
+    "CF_SET23:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out23\n\r"
+  "CF_CLEAR23:\n\r"
+             "mov $0, %%bx\n\r"
+       "out23:\n\r"
+             "mov %%bx, %0\n\r"
+             "movl %%eax, %1"
+             : "=m" (CF), "=m" (EAX)
+             : "m" (ECX), "m" (EDX));
+    if (CF)
+        printk("SHR 32: CF has set on %#x >> %#x = %#x\n", ECX, EDX, EAX);
+    else
+        printk("SHR 32: CF has cleared on %#x >> %#x = %#x\n", ECX, EDX, EAX);
+#endif
+
+#ifdef CONFIG_DEBUG_CF_SAL
+    /*
+     * SAL -- Shift arithmetic left
+     * 
+     * SAL r/m8, CL
+     * SAL r/m16, CL
+     * SAL r/m32, CL
+     *
+     * Shifts the bits in the first operand (destination operand) to the left
+     * by the number of bits specified in the second operand (count operand).
+     * Bits shifted beyond the destination operand boundary are first shifted
+     * into the CF flag, then discarded. At the end of the shift operation, 
+     * the CF flag contains the last bit shifted out of the destination 
+     * operand.
+     *
+     * The shift arithmetic left (SAL) and shift logical left (SHL) 
+     * instructions perform the same operation; they shift the bits in the 
+     * destination operand to the left (toward more significant bit locations).
+     * For each shift count, the most significant bit of the destination 
+     * operand is shifted into the CF flag, and the least significant bit is
+     * cleared.
+     */
+    /* SAL r/m8, CL */
+    CX = 0x80;
+    DX = 0x1;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%cl\n\r"
+             "sal %%cl, %%al\n\r"
+             "jc CF_SET24\n\r"
+             "jnc CF_CLEAR24\n\r"
+    "CF_SET24:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out24\n\r"
+  "CF_CLEAR24:\n\r"
+             "mov $0, %%bx\n\r"
+       "out24:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (CF)
+        printk("SAL  8: CF has set on %#x << %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("SAL  8: CF has cleared on %#x << %#x = %#x\n", CX, DX, 
+                                  AX & 0xFF);
+
+    /* SAL r/m16, CL */
+    CX = 0x8000;
+    DX = 0x1;
+    __asm__ ("mov %2, %%ax\n\r"
+             "mov %3, %%cl\n\r"
+             "sal %%cl, %%ax\n\r"
+             "jc CF_SET25\n\r"
+             "jnc CF_CLEAR25\n\r"
+    "CF_SET25:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out25\n\r"
+  "CF_CLEAR25:\n\r"
+             "mov $0, %%bx\n\r"
+       "out25:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (CF)
+        printk("SAL 16: CF has set on %#x << %#x = %#x\n", CX, DX, AX);
+    else
+        printk("SAL 16: CF has cleared on %#x << %#x = %#x\n", CX, DX, AX);
+
+    /* SAL r/m32, CL */
+    ECX = 0x80000000;
+    EDX = 0x01;
+    __asm__ ("movl %2, %%eax\n\r"
+             "movl %3, %%ecx\n\r"
+             "sal %%cl, %%eax\n\r"
+             "jc CF_SET26\n\r"
+             "jnc CF_CLEAR26\n\r"
+    "CF_SET26:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out26\n\r"
+  "CF_CLEAR26:\n\r"
+             "mov $0, %%bx\n\r"
+       "out26:\n\r"
+             "mov %%bx, %0\n\r"
+             "movl %%eax, %1"
+             : "=m" (CF), "=m" (EAX)
+             : "m" (ECX), "m" (EDX));
+    if (CF)
+        printk("SAL 32: CF has set on %#x << %#x = %#x\n", ECX, EDX, EAX);
+    else
+        printk("SAL 32: CF has cleared on %#x << %#x = %#x\n", ECX, EDX, EAX);
+#endif
+
+#ifdef CONFIG_DEBUG_CF_SAR
+    /*
+     * SAR -- Shift arithmetic right
+     *
+     * SAR r/m8, CL
+     * SAR r/m16, CL
+     * SAR r/m32, CL
+     *
+     * Shifts the bits in the first operand (destination operand) to the right
+     * by the number of bits specified in the second operand (count operand).
+     * Bits shifted beyond the destination operand boundary are first into
+     * the CF flag, then discarded. At the end of the shift operation, the 
+     * CF flag contains the last bit shifted out of the destination operand.
+     *
+     * The shift arithmetic right (SAR) instruction shift the bits of the 
+     * bits of the destination operand to the right (toward less significant
+     * bit locations). For each shift count, the least significant bit of the
+     * destination operand is shifted into the CF flag, and the most 
+     * significant bit is either set or clear depending on the instruction
+     * type. The SAR instruction sets or clears the most significant bit to
+     * correspond to the sign (most significant bit) of the original value
+     * in the destination operand. In effect, the SAR instruction fills the
+     * empty bit position's shifted value with the sign of the unshifted value.
+     */
+
+    /* SAR r/m8, CL */
+    CX = 0x83;
+    DX = 0x1;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%cl\n\r"
+             "sar %%cl, %%al\n\r"
+             "jc CF_SET27\n\r"
+             "jnc CF_CLEAR27\n\r"
+    "CF_SET27:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out27\n\r"
+  "CF_CLEAR27:\n\r"
+             "mov $0, %%bx\n\r"
+       "out27:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (CF)
+        printk("SAR  8: CF has set on %#X >> %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("SAR  8: CF has cleared on %#x >> %#x = %#x\n", CX, DX, 
+                              AX & 0xFF);
+
+    /* SAR r/m16, CL */
+    CX = 0x8003;
+    DX = 0x1;
+    __asm__ ("mov %2, %%ax\n\r"
+             "mov %3, %%cl\n\r"
+             "sar %%cl, %%ax\n\r"
+             "jc CF_SET28\n\r"
+             "jc CF_CLEAR28\n\r"
+    "CF_SET28:\n\r"
+             "mov %1, %%bx\n\r"
+             "jmp out28\n\r"
+  "CF_CLEAR28:\n\r"
+             "mov $0, %%bx\n\r"
+       "out28:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (CF)
+        printk("SAR 16: CF has set on %#x >> %#x = %#x\n", CX, DX, AX);
+    else
+        printk("SAR 16: CF has cleared on %#x >> %#x = %#x\n", CX, DX, AX);
+
+    /* SAR r/m32, CL */
+    ECX = 0x80000003;
+    EDX = 0x01;
+    __asm__ ("movl %2, %%eax\n\r"
+             "movl %3, %%ecx\n\r"
+             "sar %%cl, %%eax\n\r"
+             "jc CF_SET29\n\r"
+             "jnc CF_CLEAR29\n\r"
+    "CF_SET29:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out29\n\r"
+  "CF_CLEAR29:\n\r"
+             "mov $0, %%bx\n\r"
+       "out29:\n\r"
+             "mov %%bx, %0\n\r"
+             "movl %%eax, %1"
+             : "=m" (CF), "=m" (EAX)
+             : "m" (ECX), "m" (EDX));
+    if (CF)
+        printk("SAR 32: CF has set on %#x >> %#x = %#x\n", ECX, EDX, EAX);
+    else
+        printk("SAR 32: CF has cleared on %#x >> %#x = %#x\n", ECX, EDX, EAX);
+#endif
+
     return 0;
 }
 
-- 
2.17.1

