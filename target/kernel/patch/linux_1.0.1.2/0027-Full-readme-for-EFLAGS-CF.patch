From 0d798f71a4f5ce47c3acfcd17da39efecfdfaa9b Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.zhang@aliyun.com>
Date: Mon, 20 Aug 2018 11:01:52 +0800
Subject: [PATCH 27/27] Full readme for EFLAGS -- CF

---
 tools/demo/mmu/storage/register/EFLAGS/README.md | 5 ++++-
 tools/demo/mmu/storage/register/EFLAGS/eflags.c  | 4 ++--
 2 files changed, 6 insertions(+), 3 deletions(-)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/README.md b/tools/demo/mmu/storage/register/EFLAGS/README.md
index f9ffec5..f87ceac 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/README.md
+++ b/tools/demo/mmu/storage/register/EFLAGS/README.md
@@ -14,7 +14,10 @@ indicate the results of arithmetic instructions, such as the `ADD`, `SUB`,
   **Carry flag**  -- Set if an arithmetic operation generates a carry or a
   borrow out of the most-significant bit of the result; Cleared otherwise.
   This flag indicates an overflow condition for unsigned-integer arithmetic.
-  It is also used in multiple-precision arithmetic.
+  It is also used in multiple-precision arithmetic. `AAA`, `AAS`, `ADC`,
+  `ADCX`, `ADD`, `DAA`, `DAS`, `BT`, `BTC`, `BTR`, `BTS`, `CLC`, `STC`,
+  `MUL`, `SUB`, `SBB`, `SHL`, `SHR`, `SAL`, `SAR`, `RCL`, `RCR`, `ROR`, and
+  `ROL` instructions will effect CF flag on an arithmetic operation.
 
 ## link
 
diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
index 57db594..a582623 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/eflags.c
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -257,7 +257,7 @@ static __unused int eflags_CF(void)
      *   and destination operand for this instruction. The AAS instruction
      *   is only useful when it follows a SUB instruction that subtracts (
      *   binary subtraction) one unpacked BCD value from another and stores
-     *   a byte result in the AL register. The AAA instruction then adjusts
+     *   a byte result in the AL register. The AAS instruction then adjusts
      *   the contents of the AL register to contain the correct 1-digit
      *   unpacked BCD result.
      *
@@ -337,7 +337,7 @@ static __unused int eflags_CF(void)
      * (-9). To check the answer, note that the first digit is 9, which means
      * negative. This seems to be correct, since "8 - 9" should result in a 
      * negative number. To check the rest of the digits, represent them in
-     * decimal. "0000 1001" is 9. Then ten's complement of 9 is "10 - 9"
+     * decimal. "0000 1001" is 9. Then ten's compleent of 9 is "10 - 9"
      * = "9 - 9 + 1" = "0 + 1" = 1. so the calculated answer is "-1".
      */
     if (CF)
-- 
1.9.1

