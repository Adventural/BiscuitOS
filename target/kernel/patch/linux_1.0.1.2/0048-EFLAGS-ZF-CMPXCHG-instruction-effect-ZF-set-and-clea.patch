From 29d18ee73c2ee5672680b1734469aca76990ea39 Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.zhang@aliyun.com>
Date: Fri, 14 Sep 2018 21:06:36 +0800
Subject: [PATCH 48/52] EFLAGS -- ZF: CMPXCHG instruction effect ZF set and
 clear

---
 tools/demo/mmu/storage/register/EFLAGS/eflags.c | 45 +++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
index 765e63e..6ddc358 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/eflags.c
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -3157,6 +3157,10 @@ static __unused int eflags_ZF(void)
     unsigned short __unused BX;
     unsigned short __unused CX;
     unsigned short __unused DX;
+    unsigned short __unused DS;
+    unsigned short __unused ES;
+    unsigned short __unused GS;
+    unsigned short __unused FS;
     unsigned int   __unused EAX;
     unsigned int   __unused EBX;
     unsigned int   __unused ECX;
@@ -4467,6 +4471,47 @@ static __unused int eflags_ZF(void)
                                                   CX, AX);
 #endif
 
+#ifdef CONFIG_DEBUG_ZF_CMPXCHG
+    /*
+     * CMPXCHG -- Compare and Exchange
+     *
+     * Compares the value in the AL, AX, or EAX register with the first 
+     * operand (destination operand). If the two values are equal, the 
+     * second operand (source operand) is loaded into the destination operand.
+     * Otherwise, the destination operand is loaded into the AL, AX, or EAX
+     * register.
+     */
+    DS = 0x200;
+    ES = 0x200;
+    GS = 0x9F;
+    __asm__ ("mov %4, %%ax\n\r"
+             "mov %5, %%bx\n\r"
+             "mov %6, %%cx\n\r"
+             "cmpxchg %%cx, %%bx\n\r"
+             "jz ZF_SQ\n\r"
+             "jnz ZF_CQ\n\r"
+       "ZF_SQ:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outQ\n\r"
+       "ZF_CQ:\n\r"
+             "mov $0, %%dx\n\r"
+        "outQ:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1\n\r"
+             "mov %%bx, %2\n\r"
+             "mov %%cx, %3"
+             : "=m" (ZF), "=m" (AX), "=m" (BX), "=m" (CX) 
+             : "m" (DS), "m" (ES), "m" (GS));
+    printk("AX: %#x => \"CMPXCHG CX:%#x, BX:%#x\"\n", DS, ES, GS);
+    if (ZF)
+        printk("CMPXCHG: Zero -> AX:%#x == BX:%#x, load CX:%#x into BX:%#x\n", 
+                                 DS, ES, GS, BX);
+    else
+        printk("CMPXCHG: Non-Zero -> AX:%#x != BX:%#x, "
+                                 "load BX:%#x into AX:%#x\n", 
+                                 DS, ES, ES, AX);
+#endif
+
     return 0;
 }
 
-- 
2.7.4

