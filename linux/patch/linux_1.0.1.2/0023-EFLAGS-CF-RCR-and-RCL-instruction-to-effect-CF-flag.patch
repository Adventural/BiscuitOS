From eacbde136bd618f860f3e756bf5bc9078c6d39da Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.d.zhang@gmail.com>
Date: Wed, 15 Aug 2018 22:23:00 +0800
Subject: [PATCH 23/34] EFLAGS -- CF: RCR and RCL instruction to effect CF flag

---
 .../demo/mmu/storage/register/EFLAGS/Kconfig  |  20 ++
 .../demo/mmu/storage/register/EFLAGS/eflags.c | 193 +++++++++++++++++-
 2 files changed, 212 insertions(+), 1 deletion(-)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/Kconfig b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
index d6d3370..c2b912e 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/Kconfig
+++ b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
@@ -138,6 +138,26 @@ config DEBUG_CF_SAR
 	help
 	  Shift arithmetic right.
 
+config DEBUG_CF_RCL
+	bool "RCL     Rotate through carry left"
+	help
+	  Rotate through carry left.
+
+config DEBUG_CF_RCR
+	bool "RCR     Rotate through carry right"
+	help
+	  Rotate through carry right.
+
+config DEBUG_CF_ROL
+	bool "ROL     Rotate left"
+	help
+	  Rotate left.
+
+config DEBUG_CF_ROR
+	bool "ROR     Rotate right"
+	help
+	  Rotate right.
+
 endif # DEBUG_EFLAGS_CF
 
 endif
diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
index 8197803..657edac 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/eflags.c
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -712,7 +712,8 @@ static __unused int eflags_CF(void)
              "bts $0, %%ax\n\r"
              "jc CF_SET9\n\r"
              "jnc CF_CLEAR9\n\r"
-      "CF_SET9:\n\r"
+      "CF_SET9:\n\r"             "jmp out31\n\r"
+
              "mov $1, %%bx\n\r"
              "jmp out9\n\r"
     "CF_CLEAR9:\n\r"
@@ -1442,6 +1443,196 @@ static __unused int eflags_CF(void)
         printk("SAR 32: CF has cleared on %#x >> %#x = %#x\n", ECX, EDX, EAX);
 #endif
 
+#ifdef CONFIG_DEBUG_CF_RCL
+    /*
+     * RCL -- Rotate through carry left
+     *
+     * RCL r/m8, CL
+     * RCL r/m16, CL
+     * RCL r/m32, CL
+     *
+     * Shifts (rotate) the bits of the first operand (destination operand) the
+     * number of bit positions specified in the second operand (count operand)
+     * and stores the result in the destination operand. The destination 
+     * operand can be a register or a memory location; the count operand is
+     * an unsinged integer that can be an immediate or a value in the CL
+     * register. The count is marked to 5 bits.
+     *
+     * The rotate left through carry left (RCL) instruction shift all the bits
+     * toward more-significant bit positions, except for the most-significant
+     * bit, which is rotated to the least-significant bit location. The RCL
+     * instruction include the CF flag in the rotation. The RCL instruction 
+     * shifts the CF flag into the least-significant bit and shifts the most-
+     * significant bit into the CF flag.
+     */
+    /* RCL r/m8, CL */
+    CX = 0x80;
+    DX = 0x4;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%cl\n\r"
+             "stc\n\r"
+             "rcl %%cl, %%al\n\r"
+             "jc CF_SET30\n\r"
+             "jnc CF_CLEAR30\n\r"
+    "CF_SET30:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out30\n\r"
+  "CF_CLEAR30:\n\r"
+             "mov $0, %%bx\n\r"
+       "out30:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (CF)
+        printk("RCL  8: CF set on %#x << %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("RCL  8: CF clear on %#x << %#x = %#x\n", CX, DX, 
+                                                            AX & 0xFF);
+
+    /* RCL r/m16, CL */
+    CX = 0x8000;
+    DX = 0x04;
+    __asm__ ("mov %2, %%ax\n\r"
+             "mov %3, %%cl\n\r"
+             "stc\n\r"
+             "rcl %%cl, %%ax\n\r"
+             "jc CF_SET31\n\r"
+             "jnc CF_CLEAR31\n\r"
+    "CF_SET31:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out31\n\r"
+  "CF_CLEAR31:\n\r"
+             "mov %%bx, %0\n\r"
+       "out31:\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (CF)
+        printk("RCL 16: CF set on %#x << %#x = %#x\n", CX, DX, AX);
+    else
+        printk("RCL 16: CF clear on %#x << %#x = %#x\n", CX, DX, AX);
+
+    /* RCL r/m32, CL */
+    ECX = 0x80000000;
+    EDX = 0x04;
+    __asm__ ("movl %2, %%eax\n\r"
+             "movl %3, %%ecx\n\r"
+             "stc\n\r"
+             "rcl %%cl, %%eax\n\r"
+             "jc CF_SET32\n\r"
+             "jnc CF_CLEAR32\n\r"
+    "CF_SET32:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out32\n\r"
+  "CF_CLEAR32:\n\r"
+             "mov $0, %%bx\n\r"
+       "out32:\n\r"
+             "mov %%bx, %0\n\r"
+             "movl %%eax, %1"
+             : "=m" (CF), "=m" (EAX)
+             : "m" (ECX), "m" (EDX));
+    if (CF)
+        printk("RCL 32: CF set on %#x << %#x = %#x\n", ECX, EDX, EAX);
+    else
+        printk("RCL 32: CF clear on %#x << %#x = %#x\n", ECX, EDX, EAX);
+#endif
+
+#ifdef CONFIG_DEBUG_CF_RCR
+    /*
+     * RCR -- Rotate through carry right
+     *
+     * RCR r/m8, CL
+     * RCR r/m16, CL
+     * RCR r/m32, CL
+     *
+     * Shifts (rotates) the bits of the first operand (destination operand) 
+     * the number of bit positions specified in the second operand (count
+     * operand) and stores the result in the destination operand. The 
+     * destination operand can be a register or a memory location; the count
+     * operand is an unsigned integer that can be an immediate or a value in
+     * the CL register.
+     *
+     * The rotate right (ROR) and rotate throght carry right (CRC) instruction
+     * shift all the bits toward less significant bit positions, except for
+     * the least-significant bit, which is rotated to the most-significant bit
+     * location. The RCR instructions include the CF flag in the rotation.
+     * The RCR instruction shifts the CF flag into the most-significant bit
+     * and shifts the least-significant bit into the CF flag.
+     */
+
+    /* RCR r/m8, CL */
+    CX = 0x7;
+    DX = 0x04;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%cl\n\r"
+             "stc\n\r"
+             "rcr %%cl, %%al\n\r"
+             "jc CF_SET33\n\r"
+             "jnc CF_CLEAR33\n\r"
+    "CF_SET33:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out33\n\r"
+  "CF_CLEAR33:\n\r"
+             "mov $0, %%bx\n\r"
+       "out33:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (CF)
+        printk("RCR  8: CF set on %#x >> %#x = %#x\n", CX, DX, AX & 0xFF);
+    else
+        printk("RCR  8: CF clear on %#x >> %#x = %#x\n", CX, DX, AX & 0xFF);
+
+    /* RCR r/m16, CL */
+    CX = 0x8007;
+    DX = 0x04;
+    __asm__ ("mov %2, %%ax\n\r"
+             "mov %3, %%cl\n\r"
+             "stc\n\r"
+             "rcr %%cl, %%ax\n\r"
+             "jc CF_SET34\n\r"
+             "jnc CF_CLEAR34\n\r"
+    "CF_SET34:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out34\n\r"
+  "CF_CLEAR34:\n\r"
+             "mov $0, %%bx\n\r"
+       "out34:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    if (CF)
+        printk("RCR 16: CF set on %#x >> %#x = %#x\n", CX, DX, AX);
+    else
+        printk("RCR 16: CF clear on %#x >> %#x = %#x\n", CX, DX, AX);
+
+    /* RCR r/m32, CL */
+    ECX = 0x80000007;
+    EDX = 0x04;
+    __asm__ ("movl %2, %%eax\n\r"
+             "movl %3, %%ecx\n\r"
+             "stc\n\r"
+             "rcr %%cl, %%eax\n\r"
+             "jc CF_SET35\n\r"
+             "jnc CF_CLEAR35\n\r"
+    "CF_SET35:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out35\n\r"
+  "CF_CLEAR35:\n\r"
+             "mov %%bx, %0\n\r"
+       "out35:\n\r"
+             "movl %%eax, %1"
+             : "=m" (CF), "=m" (EAX)
+             : "m" (ECX), "m" (EDX));
+    if (CF)
+        printk("RCR 17: CF set on %#x >> %#x = %#x\n", ECX, EDX, EAX);
+    else
+        printk("RCR 17: CF clear on %#x >> %#x = %#x\n", ECX, EDX, EAX);
+#endif
+
     return 0;
 }
 
-- 
2.17.1

