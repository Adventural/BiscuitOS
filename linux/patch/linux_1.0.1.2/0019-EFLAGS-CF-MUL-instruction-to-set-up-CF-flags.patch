From 770950eb26bd4d24f02990ce06bbe85f9783fc85 Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.zhang@aliyun.com>
Date: Tue, 14 Aug 2018 18:23:20 +0800
Subject: [PATCH 19/34] EFLAGS -- CF: MUL instruction to set up CF flags

---
 .../demo/mmu/storage/register/EFLAGS/Kconfig  |  15 +
 .../demo/mmu/storage/register/EFLAGS/eflags.c | 358 +++++++++++++++---
 2 files changed, 313 insertions(+), 60 deletions(-)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/Kconfig b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
index 4aaf639..4607fa5 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/Kconfig
+++ b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
@@ -63,6 +63,16 @@ config DEBUG_CF_ADD
 	help
 	  Debug ADD instruction for carrying on.
 
+config DEBUG_CF_DAA
+	bool "DAA     Decimal adjust AL after addition"
+	help
+	  Debug DAA instruction for carrying on.
+
+config DEBUG_CF_DAS
+	bool "DAS     Decimal adjust AL after subtraction"
+	help
+	  Debug DAS instruction for borrow on.
+
 config DEBUG_CF_BT
 	bool "BT      Test bit"
 	help
@@ -93,6 +103,11 @@ config DEBUG_CF_STC
 	help
 	  Set up the CF flag in the EFLAGS register.
 
+config DEBUG_CF_MUL
+	bool "MUL     Unsigned multiply"
+	help
+	  Unsigned multiply.
+
 endif # DEBUG_EFLAGS_CF
 
 endif
diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
index 71273f8..ae81707 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/eflags.c
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -191,6 +191,9 @@ static __unused int eflags_CF(void)
     unsigned short __unused CX;
     unsigned short __unused DX;
     unsigned int   __unused EAX;
+    unsigned int   __unused EBX;
+    unsigned int   __unused ECX;
+    unsigned int   __unused EDX;
 
 #ifdef CONFIG_DEBUG_CF_AAA
     /* 
@@ -230,14 +233,14 @@ static __unused int eflags_CF(void)
     __asm__ ("mov $0x9, %%ax\n\r"
              "add $0x1, %%al\n\r"
              "aaa\n\r"
-             "jc CF_SET\n\r"
-             "jnc CF_CLEAR\n\r"
-      "CF_SET:\n\r"
+             "jc CF_SET0\n\r"
+             "jnc CF_CLEAR0\n\r"
+      "CF_SET0:\n\r"
              "mov $1, %%ebx\n\r"
-             "jmp out\n\r"
-    "CF_CLEAR:\n\r"
+             "jmp out0\n\r"
+    "CF_CLEAR0:\n\r"
              "mov $0, %%ebx\n\r"
-             "out:\n\r"
+             "out0:\n\r"
              "mov %%ebx, %0\n\r"
              "mov %%ax, %1" : "=m" (CF), "=m" (AX):);
 
@@ -285,14 +288,14 @@ static __unused int eflags_CF(void)
     __asm__ ("mov $8, %%ax\n\r"
              "sub $9, %%al\n\r"
              "aas\n\r"
-             "jc CF_SET\n\r"
-             "jc CF_CLEAR\n\r"
-      "CF_SET:\n\r"
+             "jc CF_SET1\n\r"
+             "jc CF_CLEAR1\n\r"
+      "CF_SET1:\n\r"
              "mov $1, %%ebx\n\r"
-             "jmp out\n\r"
-    "CF_CLEAR:\n\r"
+             "jmp out1\n\r"
+    "CF_CLEAR1:\n\r"
              "mov $0, %%ebx\n\r"
-         "out:\n\r"
+         "out1:\n\r"
              "mov %%bx, %0\n\r"
              "mov %%ax, %1" : "=m" (CF), "=m" (AX));
 
@@ -395,14 +398,14 @@ static __unused int eflags_CF(void)
      */
     __asm__ ("movl $0xFFFFFFFF, %%eax\n\r"
              "adcx $0x1, %%eax\n\r"
-             "jc CF_SET\n\r"
-             "jnc CF_CLEAR\n\r"
-      "CF_SET:\n\r"
+             "jc CF_SET2\n\r"
+             "jnc CF_CLEAR2\n\r"
+      "CF_SET2:\n\r"
              "mov $1, %%bx\n\r"
-             "jmp out\n\r"
-    "CF_CLEAR:\n\r"
+             "jmp out2\n\r"
+    "CF_CLEAR2:\n\r"
              "mov $0, %%bx\n\r"
-         "out:\n\r"
+         "out2:\n\r"
              "mov %%bx, %0\n\r"
              "movl %%eax, %1"
              : "=m" (CF), "=m" (EAX) :);
@@ -434,14 +437,14 @@ static __unused int eflags_CF(void)
      */
     __asm__ ("mov $0xFFFF, %%ax\n\r"
              "add $1, %%ax\n\r"
-             "jc CF_SET\n\r"
-             "jnc CF_CLEAR\n\r"
-      "CF_SET:\n\r"
+             "jc CF_SET3\n\r"
+             "jnc CF_CLEAR3\n\r"
+      "CF_SET3:\n\r"
              "mov $1, %%bx\n\r"
-             "jmp out\n\r"
-    "CF_CLEAR:\n\r"
+             "jmp out3\n\r"
+    "CF_CLEAR3:\n\r"
              "mov $0, %%bx\n\r"
-         "out:\n\r"
+         "out3:\n\r"
              "mov %%bx, %0\n\r"
              "mov %%ax, %1"
              : "=m" (CF), "=m" (AX) :);
@@ -449,6 +452,126 @@ static __unused int eflags_CF(void)
         printk("ADD: Carry on 0xFFFF + 0x1 = %#x\n", AX);
 #endif
 
+#ifdef CONFIG_DEBUG_CF_DAA
+    /*
+     * DAA -- Decimal Adjust AL after Addition
+     *
+     * Adjust the sum of two packed BCD values to create a packed BCD result.
+     * The AL register is the implied source and destination operand. The 
+     * DAA instruction is only useful when it follow an ADD instruction that
+     * adds (binary addition) two 2-digit, packed BCD values and stores a
+     * byte result in the AL register. The DAA instruction then adjusts the
+     * contents of the AL register to contain the correct 2-digit, packed
+     * BCD result. If a decimal carry is detected, the CF and AF flags are
+     * set accordingly.
+     *
+     * IF instruction DAA
+     *     old_AL <---- AL
+     *     old_CF <---- CF
+     *     CF     <---- 0
+     *     IF (((AL AND 0FH) > 9) or AF = 1)
+     *         THEN
+     *             AL <---- AL + 6 
+     *             CF <---- old_CF or (Carry from AL <---- AL + 6)
+     *             AF <---- 1
+     *         ELSE
+     *             AF <---- 0
+     *     FI
+     *     IF ((old_AL > 99H) or (old_CF = 1))
+     *         THEN
+     *             AL <---- AL + 60H
+     *             CF <---- 1
+     *         ELSE
+     *             CF <---- 0
+     *     FI
+     * FI
+     *
+     * The CF and AF flags are set if the adjustment of the value results
+     * in a decimal carry in either digit of the result. The SF, ZF, and PF
+     * flags are set according to the result. The OF flag is undefined.
+     */
+    CX = 0x79;
+    DX = 0x35;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%bl\n\r"
+             "add %%bl, %%al\n\r"
+             "daa\n\r"
+             "jc CF_SET4\n\r"
+             "jnc CF_CLEAR4\n\r"
+      "CF_SET4:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out4\n\r"
+    "CF_CLEAR4:\n\r"
+             "mov $0, %%bx\n\r"
+         "out4:\n\r"
+             "mov %%ax, %0\n\r"
+             "mov %%bx, %1"
+             : "=m" (AX), "=m" (CF) : "m" (CX), "m" (DX));
+    if (CF)
+        printk("DAA: CF set on adjust after %#x + %#x = %#x\n", CX, DX, AX);
+    else
+        printk("DAA: CF cleared on adjust after %#x + %#x = %#x\n",
+                                CX, DX, AX);
+#endif
+
+#ifdef CONFIG_DEBUG_CF_DAS
+    /*
+     * DAS -- Decimal Adjust AL after Subtraction
+     *
+     * Adjusts the result of the subtraction of two packed BCD values to 
+     * create a packed BCD result. The AL register is the implied source
+     * and destination operand. The DAS instruction is only useful when
+     * it follows a SUB instruction that subtracts (binary subtraction)
+     * one 2-digit, packed BCD value from another and stores a byte result
+     * in the AL register. The DAS instruction then adjusts the contents of
+     * the AL register to contain the correct 2-digit, packed BCD result.
+     * IF a decimal borrow is detected, the CF and AF flags are set 
+     * accordingly.
+     *
+     * IF instruction DAS
+     *     old_AL <---- AL
+     *     old_CF <---- CF
+     *     CF     <---- 0
+     *     IF (((AL AND 0FH) > 9) or AF = 1)
+     *         THEN
+     *             AL <---- AL - 6
+     *             CF <---- old_CF or (Borrow from AL <---- AL - 6)
+     *             AF <---- 1
+     *         ELSE
+     *             AF <---- 0
+     *     FI
+     *     IF ((old_AL > 99H) or (old_CF = 1))
+     *         THEN
+     *             AL <---- AL - 60H
+     *             CF <---- 1
+     *     FI
+     * FI
+     */
+    CX = 0x35;
+    DX = 0x47;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%bl\n\r"
+             "sub %%bl, %%al\n\r"
+             "das\n\r"
+             "jc CF_SET5\n\r"
+             "jnc CF_CLEAR5\n\r"
+      "CF_SET5:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out5\n\r"
+    "CF_CLEAR5:\n\r"
+             "mov $0, %%bx\n\r"
+         "out5:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX) : "m" (CX), "m" (DX));
+    if (CF)
+        printk("DAS: CF set on adjust after %#x - %#x = %#x\n",
+                                  CX, DX, AX);
+    else
+        printk("DAS: CF cleared on adjust after %#x - %#x = %#x\n",
+                                  CX, DX, AX);
+#endif
+
 #ifdef CONFIG_DEBUG_CF_BT
     /*
      * BT -- Bit Test
@@ -478,14 +601,14 @@ static __unused int eflags_CF(void)
     DX = 0x3;
     __asm__ ("mov %1, %%ax\n\r"
              "bt $0, %%ax\n\r"
-             "jc CF_SET\n\r"
-             "jnc CF_CLEAR\n\r"
-      "CF_SET:\n\r"
+             "jc CF_SET6\n\r"
+             "jnc CF_CLEAR6\n\r"
+      "CF_SET6:\n\r"
              "mov $1, %%bx\n\r"
-             "jmp out\n\r"
-    "CF_CLEAR:\n\r"
+             "jmp out6\n\r"
+    "CF_CLEAR6:\n\r"
              "mov $0, %%bx\n\r"
-         "out:\n\r"
+         "out6:\n\r"
              "mov %%bx, %0"
              : "=m" (CF) : "m" (DX));
     if (CF)
@@ -515,14 +638,14 @@ static __unused int eflags_CF(void)
     CX = 0x3;
     __asm__ ("mov %2, %%ax\n\r"
              "btc $0, %%ax\n\r"
-             "jc CF_SET\n\r"
-             "jnc CF_CLEAR\n\r"
-      "CF_SET:\n\r"
+             "jc CF_SET7\n\r"
+             "jnc CF_CLEAR7\n\r"
+      "CF_SET7:\n\r"
              "mov $1, %%bx\n\r"
-             "jmp out\n\r"
-    "CF_CLEAR:\n\r"
+             "jmp out7\n\r"
+    "CF_CLEAR7:\n\r"
              "mov $0, %%bx\n\r"
-         "out:\n\r"
+         "out7:\n\r"
              "mov %%bx, %0\n\r"
              "mov %%ax, %1"
              : "=m" (CF), "=m" (AX) : "m" (CX));
@@ -552,14 +675,14 @@ static __unused int eflags_CF(void)
     DX = 0x203;
     __asm__ ("mov %2, %%ax\n\r"
              "btr $0, %%ax\n\r"
-             "jc CF_SET\n\r"
-             "jnc CF_CLEAR\n\r"
-      "CF_SET:\n\r"
+             "jc CF_SET8\n\r"
+             "jnc CF_CLEAR8\n\r"
+      "CF_SET8:\n\r"
              "mov $1, %%bx\n\r"
-             "jmp out\n\r"
-    "CF_CLEAR:\n\r"
+             "jmp out8\n\r"
+    "CF_CLEAR8:\n\r"
              "mov $0, %%bx\n\r"
-         "out:\n\r"
+         "out8:\n\r"
              "mov %%bx, %0\n\r"
              "mov %%ax, %1"
              : "=m" (CF), "=m" (AX) : "m" (DX));
@@ -587,14 +710,14 @@ static __unused int eflags_CF(void)
     DX = 0x203;
     __asm__ ("mov %2, %%ax\n\r"
              "bts $0, %%ax\n\r"
-             "jc CF_SET\n\r"
-             "jnc CF_CLEAR\n\r"
-      "CF_SET:\n\r"
+             "jc CF_SET9\n\r"
+             "jnc CF_CLEAR9\n\r"
+      "CF_SET9:\n\r"
              "mov $1, %%bx\n\r"
-             "jmp out\n\r"
-    "CF_CLEAR:\n\r"
+             "jmp out9\n\r"
+    "CF_CLEAR9:\n\r"
              "mov $0, %%bx\n\r"
-         "out:\n\r"
+         "out9:\n\r"
              "mov %%bx, %0\n\r"
              "mov %%ax, %1"
              : "=m" (CF), "=m" (AX) : "m" (DX));
@@ -617,14 +740,14 @@ static __unused int eflags_CF(void)
      * unaffected.
      */
     __asm__ ("clc\n\r"
-             "jc CF_SET\n\r"
-             "jnc CF_CLEAR\n\r"
-      "CF_SET:\n\r"
+             "jc CF_SET10\n\r"
+             "jnc CF_CLEAR10\n\r"
+      "CF_SET10:\n\r"
              "mov $1, %%bx\n\r"
-             "jmp out\n\r"
-    "CF_CLEAR:\n\r"
+             "jmp out10\n\r"
+    "CF_CLEAR10:\n\r"
              "mov $0, %%bx\n\r"
-         "out:\n\r"
+         "out10:\n\r"
              "mov %%bx, %0"
              : "=m" (CF) :);
     if (CF)
@@ -645,14 +768,14 @@ static __unused int eflags_CF(void)
      * The CF flag is set. The OF, ZF, SF, AF, and PF flags are unaffected.
      */
     __asm__ ("stc\n\r"
-             "jc CF_SET\n\r"
-             "jnc CF_CLEAR\n\r"
-      "CF_SET:\n\r"
+             "jc CF_SET11\n\r"
+             "jnc CF_CLEAR11\n\r"
+      "CF_SET11:\n\r"
              "mov $1, %%bx\n\r"
-             "jmp out\n\r"
-    "CF_CLEAR:\n\r"
+             "jmp out11\n\r"
+    "CF_CLEAR11:\n\r"
              "mov $0, %%bx\n\r"
-         "out:\n\r"
+         "out11:\n\r"
              "mov %%bx, %0"
              : "=m" (CF) :);
     if (CF)
@@ -661,6 +784,121 @@ static __unused int eflags_CF(void)
         panic("STC: CF has cleared on EFLAGS register");
 #endif
 
+#ifdef CONFIG_DEBUG_CF_MUL
+    /*
+     * MUL -- Unsigned Multiply
+     *
+     * MUL r/m8        AX       <---- AL * r/m8
+     * MUL r/m16       DX:AX    <---- AX * r/m16
+     * MUL r/m32       EDX:EAX  <---- EAX * r/m32
+     *
+     * Performs an unsigned multiplication of the frist operand (destination
+     * operand) and the second operand (source operand) and stores the 
+     * result in the destination operand. The destination operand is an 
+     * implied operand located in register AL, AX or EAX (depending on the
+     * size of the operand); the source operand is located in a general-
+     * purpose register or a memory location.
+     *
+     * The result is stored in register AX, register pair DX:AX, or register
+     * EDX:EAX (depending on the operand size), with the high-order bits of
+     * the product contained in register AH, DX, or EDX, respectively. If the
+     * high-order bits of the product are 0, the CF and OF flags are cleared;
+     * otherwise, the flags are set.
+     *
+     * IF (Byte operation)
+     *     THEN
+     *         AX <---- AL * SRC
+     *     ELSE (* Word or doubleword operation *)
+     *         IF OperandSize = 16
+     *             THEN
+     *                 DX:AX <---- AX * SRC
+     *             ELSE IF OperandSize = 32
+     *                 THEN 
+     *                     EDX:EAX <---- EAX * SRC
+     *             FI
+     *     FI
+     * FI
+     * 
+     * The OF and CF flags are set to 0 if the upper half of the result is
+     * 0; otherwise, they are set to 1. The SF, ZF, AF, and PF flags are 
+     * undefined.
+     */
+
+    /* MUL R/M8 */
+    CX = 0x40;
+    DX = 0x4;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%bl\n\r"
+             "mul %%bl\n\r"
+             "jc CF_SET12\n\r"
+             "jnc CF_CLEAR12\n\r"
+      "CF_SET12:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out12\n\r"
+    "CF_CLEAR12:\n\r"
+             "mov $0, %%bx\n\r"
+         "out12:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (CF), "=m" (AX) : "m" (CX), "m" (DX));
+    if (CF)
+        printk("MUL 8: CF has set on %#x * %#x = %#x\n", CX, DX, AX);
+    else
+        printk("MUL 8: CF has clear on %#x * %#x = %#x\n", CX, DX, AX);
+
+    /* MUL R/M16 */
+    CX = 0x1000;
+    BX = 0x10;
+    __asm__ ("mov %3, %%ax\n\r"
+             "mov %4, %%bx\n\r"
+             "mul %%bx\n\r"
+             "jc CF_SET13\n\r"
+             "jnc CF_CLEAR13\n\r"
+      "CF_SET13:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out13\n\r"
+    "CF_CLEAR13:\n\r"
+             "mov $0, %%bx\n\r"
+         "out13:\n\r"
+             "mov %%bx, %0\n\r"
+             "mov %%ax, %1\n\r"
+             "mov %%dx, %2\n\r"
+             : "=m" (CF), "=m" (AX), "=m" (DX) 
+             : "m" (CX), "m" (BX));
+    if (CF)
+        printk("MUL 16: CF has set on %#x * %#x = %#x\n", 
+                        CX, DX, (DX << 16) | AX);
+    else
+        printk("MUL 16: CF has cleared on %#x * %#x = %#x\n", CX, DX, 
+                                 (DX << 16) | AX);
+    
+    /* MUL R/M32 */
+    ECX = 0x100000;
+    EBX = 0x1000; 
+    __asm__ ("movl %3, %%eax\n\r"
+             "movl %4, %%ebx\n\r"
+             "mul %%ebx\n\r"
+             "jc CF_SET14\n\r"
+             "jnc CF_CLEAR14\n\r"
+    "CF_SET14:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out14\n\r"
+  "CF_CLEAR14:\n\r"
+             "mov $0, %%bx\n\r"
+       "out14:\n\r"
+             "mov %%bx, %0\n\r"
+             "movl %%edx, %1\n\r"
+             "movl %%eax, %2"
+             : "=m" (CF), "=m" (EDX), "=m" (EAX)
+             : "m" (ECX), "m" (EBX));
+    if (CF)
+        printk("MUL 32: CF has set on %#x * %#x = %#x%08x\n", 
+                                ECX, EBX, EDX, EAX);
+    else
+        printk("MUL 32: CF has clear on %#x * %#x = %#x%08x\n",
+                                ECX, EBX, EDX, EAX);
+#endif
+
     return 0;
 }
 
-- 
2.17.1

