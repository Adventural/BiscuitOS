From de498c15ad031664bb582b7f2ea25406e9d46eb1 Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.d.zhang@gmail.com>
Date: Wed, 29 Aug 2018 21:12:36 +0800
Subject: [PATCH 28/34] EFLAGS -- PF: ADC, ADD, CMP, CMPSB, and AND instruction
 to effect PF set and clear

---
 .../demo/mmu/storage/register/EFLAGS/Kconfig  |  46 +-
 .../mmu/storage/register/EFLAGS/README.md     |   5 +
 .../demo/mmu/storage/register/EFLAGS/eflags.c | 448 +++++++++++++++++-
 3 files changed, 496 insertions(+), 3 deletions(-)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/Kconfig b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
index adca33a..2cff3f7 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/Kconfig
+++ b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
@@ -160,6 +160,50 @@ config DEBUG_CF_ROR
 
 endif # DEBUG_EFLAGS_CF
 
-endif
+config DEBUG_EFLAGS_PF
+        bool "PF      Parity flag (bit 2)"
+        help
+          Parity flag - bit2.
+
+if DEBUG_EFLAGS_PF
+
+config DEBUG_PF_AAD
+	bool "AAD     ASCII adjust AX before division"
+	help
+	  ASCII adjust AX before division.
+
+config DEBUG_PF_AAM
+	bool "AAM     ASCII adjust AX after multiply"
+	help
+	  ASCII adjust AX after multiply
+
+config DEBUG_PF_ADC
+	bool "ADC     Addition with carry bit"
+	help
+	  Addition with carry via ADC instruction.
+
+config DEBUG_PF_ADD
+	bool "ADD     Carroy on addition"
+	help
+	  Debug ADD instruction for carrying on.
+
+config DEBUG_PF_AND
+	bool "AND     Logical AND"
+	help
+	  Debug AND instruction for Parity Bit.
+
+config DEBUG_PF_CMP
+	bool "CMP     Compare two operands"
+	help
+	  Debug CMP instruction for Parity Bit.
+
+config DEBUG_PF_CMPSB
+	bool "CMPSB   Compare string operands"
+	help
+	  Debug CMPSB instruction for Parity Bit.
+
+endif # DEBUG_EFLAGS_PF
+
+endif # DEBUG_REGISTER_EFLAGS
 
 endmenu
diff --git a/tools/demo/mmu/storage/register/EFLAGS/README.md b/tools/demo/mmu/storage/register/EFLAGS/README.md
index f87ceac..613007f 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/README.md
+++ b/tools/demo/mmu/storage/register/EFLAGS/README.md
@@ -19,6 +19,11 @@ indicate the results of arithmetic instructions, such as the `ADD`, `SUB`,
   `MUL`, `SUB`, `SBB`, `SHL`, `SHR`, `SAL`, `SAR`, `RCL`, `RCR`, `ROR`, and
   `ROL` instructions will effect CF flag on an arithmetic operation.
 
+* **PF (bit 2)**
+
+  **Parity flag** -- Set if the least-significant byte of the result 
+  contains an even number of 1 bits.
+
 ## link
 
   [Intel Architectures Software Developer's Manual: Combined Volumes: 1 -- Chapter 3 Basic Execution Environment: 3.4 Basic Program Execution Register](https://software.intel.com/en-us/articles/intel-sdm)
diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
index a582623..26216a6 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/eflags.c
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -712,8 +712,8 @@ static __unused int eflags_CF(void)
              "bts $0, %%ax\n\r"
              "jc CF_SET9\n\r"
              "jnc CF_CLEAR9\n\r"
-      "CF_SET9:\n\r"             "jmp out31\n\r"
-
+      "CF_SET9:\n\r"             
+             "jmp out9\n\r"
              "mov $1, %%bx\n\r"
              "jmp out9\n\r"
     "CF_CLEAR9:\n\r"
@@ -1751,6 +1751,446 @@ static __unused int eflags_CF(void)
     return 0;
 }
 
+/*
+ * PF (bit 2) -- Parity flag
+ *
+ *   Parity flag -- Set if the least-significant byte of the result
+ *   contains an even number of 1 bits.
+ */
+static __unused int eflags_PF(void)
+{
+    unsigned short __unused AX;
+    unsigned short __unused BX;
+    unsigned short __unused CX;
+    unsigned short __unused DX;
+    unsigned short __unused PF;
+    unsigned int   __unused EAX;
+    unsigned int   __unused EBX;
+    unsigned int   __unused ECX;
+    unsigned int   __unused EDX;
+
+#ifdef CONFIG_DEBUG_PF_AAD
+    /*
+     * AAD -- ASCII Adjust AX Before Division
+     *
+     * Adjusts two unpacked BCD digits (the least-significant digit in the AL
+     * register and the most-significant digit in the AH register) so that a
+     * division operation performed on the result will yield a correct
+     * unoacked BCD value. The AAD instruction is only useful when it precedes
+     * a DIV instruction that divides (binary division) the adjusted value
+     * in the AX register by an unpacked BCD value.
+     *
+     * The AAD instruction sets the value in the AL register to (AL + (10 * AH))
+     * and then clears the AH register to 00H. The value in the AX register
+     * is then equal to the binary equivalent of the original unpacked two-
+     * digit (base 10) number in register AH and AL.
+     *
+     * The generalized version of this instruction allows adjustment of two
+     * unpacked digits of any number base, by setting the imm8 byte to the 
+     * selected number base (for example, 08H for octal, 0AH for decimal, or
+     * 0CH for base 12 numbers). The AAD mnemonic is interpreted by all 
+     * assemblyers to means adjust ASCII (base 10) values. To adjust values in
+     * another number base, the instruction must be hand coded in machine
+     * code (D5 imm8)
+     *
+     * IF AAD instruction
+     *     THEN
+     *         tempAL <---- AL;
+     *         tmepAH <---- AH;
+     *         AL <---- (tmpAL + (tmpAH * imm8)) AND 0xFFH;
+     *         (* imm8 is set to 0AH for the AAD mnemonic *)
+     *         AH <---- 0
+     * FI
+     */
+    CX = 0x0503;
+    DX = 0xa;
+    __asm__ ("mov %3, %%ax\n\r"
+             "mov %4, %%bl\n\r"
+             "aad\n\r"
+             "jp PF_SET0\n\r"
+             "jnp PF_CLEAR0\n\r"
+     "PF_SET0:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out0\n\r"
+   "PF_CLEAR0:\n\r"
+             "mov $0, %%dx\n\r"
+        "out0:\n\r"
+             "mov %%ax, %0\n\r" 
+             "div %%bl\n\r"
+             "mov %%ax, %1\n\r"
+             "mov %%dx, %2"
+             : "=m" (AX), "=m" (BX), "=m" (PF)
+             : "m" (CX), "m" (DX));
+    printk("AX: %#x AAD format %#x\n", CX, AX);
+    if (PF)
+        printk("AAD: PF set: %#x / %#x = %#x\n", CX, DX, BX);
+    else
+        printk("AAD: PF clear: %#x / %#x = %#x\n", CX, DX, BX);
+#endif
+
+#ifdef CONFIG_DEBUG_PF_AAM
+    /*
+     * AAM -- ASCII adjust AX after multiply
+     *
+     * Adjust the result of the multiplication of two unpacked BCD values to
+     * create a pair of unpacked (base 10) BCD values. The AX register is 
+     * the implied source and destination operand for this instruction. The
+     * The AAM instruction is only useful when it follows an MUL instruction
+     * that multiplies (binary multiplication) two unpacked BCD values and 
+     * stores a word result in the AX register. The AAM instruction then 
+     * adjusts contents of the AX register to contain the correct 2-digit 
+     * unpacked (base 10) BCD result.
+     *
+     * The general version of this instruction allows adjustment of the 
+     * contents of the AX to create two unpacked digits of any number base.
+     * Here, the imm8 byte is set to the selected number base (for example,
+     * 0x08H for octal, 0AH for decimal, or 0CH for base 12 numbers). The 
+     * AAM mnemonic is interpreted by all assemblers to mean adjust to ASCII
+     * (base 10) values. To adjust to values in another number base, the 
+     * instruction must be hand coded inb machine code (D4 imm8)
+     *
+     * IF instruction AAM
+     *     THEN
+     *         temp <---- AL;
+     *         AH <---- tempAL / imm8; 
+     *         (* imm8 is set to 0AH for the AAM mnemonic *)
+     *         AL <---- temp MODE imm8
+     * FI
+     */
+    CX = 0x9;
+    DX = 0x7;
+    __asm__ ("mov %3, %%al\n\r"
+             "mov %4, %%bl\n\r"
+             "mul %%bl\n\r"
+             "mov %%ax, %0\n\r"
+             "aam\n\r"
+             "jp PF_SET1\n\r"
+             "jnp PF_CLEAR1\n\r"
+     "PF_SET1:\n\r"
+             "mov $1, %%bx\n\r"
+             "jmp out1\n\r"
+   "PF_CLEAR1:\n\r"
+             "mov $0, %%bx\n\r"
+        "out1:\n\r"
+             "mov %%bx, %1\n\r"
+             "mov %%ax, %2"
+             : "=m" (BX), "=m" (PF), "=m" (AX)
+             : "m" (CX), "m" (DX));
+    printk("AX: %#x AAM format %#x\n", BX, AX);
+    if (PF) 
+        printk("AAM - PF set: %#x * %#x = %#x\n", CX, DX, AX);
+    else
+        printk("AAM - PF clear: %#x * %#x = %#x\n", CX, DX, AX);
+
+#endif
+
+#ifdef CONFIG_DEBUG_PF_ADC
+    /*
+     * ADC -- Add with Carry
+     *
+     * ADC AL,  imm8
+     * ADC AX,  imm16
+     * ADC EAX, imm32
+     *
+     * Adds the destination operand (first operand), the source operand (
+     * second operand), and the carry (CF) flag and stores the result in the
+     * destination operand. The destination operand can be a register or a
+     * memory location; the source operand can be an immediate, a register,
+     * or a memory location. (However, two memory operand cannot be used in
+     * one instruction.) The state of the CF flag represents a carry from
+     * a previous addition. When an immediate value is used as an operand,
+     * it is sign-extended to the length of the destination operand format.
+     *
+     * The ADC instruction does not distinguish between signed or unsigned
+     * operands. Instead, the processor evaluates the result for both data
+     * types and sets the OF and CF flags to indicate a carry in the signed
+     * unsigned result, respectively. The SF flags indicates the sign of the
+     * signed result.
+     *
+     * DEST <---- DEST + SRC + CF
+     *
+     */
+
+    /* ADC AL, imm8 */
+    CX = 0x1;
+    DX = 0x1;
+    __asm__ ("stc\n\r"
+             "mov %2, %%al\n\r"
+             "mov %3, %%bl\n\r"
+             "adc %%bl, %%al\n\r"
+             "jp PF_S2\n\r"
+             "jnp PF_C2\n\r"
+       "PF_S2:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out2\n\r"
+       "PF_C2:\n\r"
+             "mov $0, %%dx\n\r"
+        "out2:\n\r"
+             "mov %%ax, %0\n\r"
+             "mov %%dx, %1"
+             : "=m" (AX), "=m" (PF)
+             : "m" (CX), "m" (DX));
+    if (PF)
+        printk("ADC  8: even number on LSB-AL: %#x + %#x = %#x(AX: %#x)\n", 
+                      CX, DX, AX & 0xFF, AX);
+    else
+        printk("ADC  8: odd number on LSB-AL: %#x + %#x = %#x(AX: %#x)\n", 
+                      CX, DX, AX & 0xFF, AX);
+
+    /* ADC AX, imm16 */
+    CX = 0x101;
+    DX = 0x100;
+    __asm__ ("stc\n\r"
+             "mov %2, %%ax\n\r"
+             "mov %3, %%bx\n\r"
+             "adc %%bx, %%ax\n\r"
+             "jp PF_S3\n\r"
+             "jnp PF_C3\n\r"
+       "PF_S3:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out3\n\r"
+       "PF_C3:\n\r"
+             "mov $0, %%dx\n\r"
+        "out3:\n\r"
+             "mov %%ax, %0\n\r"
+             "mov %%dx, %1"
+             : "=m" (AX), "=m" (PF)
+             : "m" (CX), "m" (DX));
+    if (PF)
+        printk("ADC 16: even number LSB-AL: %#x + %#x = %#x(AL: %#x)\n",
+                               CX, DX, AX, AX & 0xFF);
+    else
+        printk("ADC 16: odd number LSB-AL: %#x + %#x = %#x(AL: %#x)\n",
+                               CX, DX, AX, AX & 0xFF);
+
+    /* ADC EAX, imm32 */
+    ECX = 0x10000000;
+    EDX = 0x00001002;
+    __asm__ ("stc\n\r"
+             "movl %2, %%eax\n\r"
+             "movl %3, %%ebx\n\r"
+             "adcl %%ebx, %%eax\n\r"
+             "jp PF_S4\n\r"
+             "jnp PF_C4\n\r"
+       "PF_S4:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out4\n\r"
+       "PF_C4:\n\r"
+             "mov $0, %%dx\n\r"
+        "out4:\n\r"
+             "movl %%eax, %0\n\r"
+             "mov %%dx, %1"
+             : "=m" (EAX), "=m" (PF)
+             : "m" (ECX), "m" (EDX));
+    if (PF)
+        printk("ADC 32: even nunmber LSB-AL: %#x + %#x = %#x (AL: %#x)\n",
+                      ECX, EDX, EAX, EAX & 0xFF);
+    else
+        printk("ADC 32: odd number LSB-AL: %#x + %#x = %#x (AL: %#x)\n",
+                      ECX, EDX, EAX, EAX & 0xFF);
+    
+#endif
+
+#ifdef CONFIG_DEBUG_PF_ADD
+    /*
+     * ADD -- Addition with two operands.
+     *
+     * Adds the destination operand (first operand) and the source operand (
+     * second operand) and then stores the result in the destination operand.
+     * The destination operand can be a register or a memory location; the 
+     * source operand can be an immediate, a register, or a memory location.
+     * (However, two memory operands cannot be used in one instruction.) When
+     * an immediate value is used as an operand, it it sign-extended to the
+     * length of the destination operand format.
+     * 
+     * The ADD instruction performs integer addition. It evaluates the result
+     * for both signed and unsigned integer operands and sets the CF and
+     * OF flags to indicate a carry (overflow) in the signed or unsigned 
+     * result, respectively. The SF flag indicates the sign of the signed 
+     * result.
+     *
+     * DEST <---- DEST + SRC
+     *
+     * The OF, SF, ZF, AF, CF, and PF flags are set according to the result.
+     */
+    CX = 0x01;
+    DX = 0x02;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%bl\n\r"
+             "add %%bl, %%al\n\r"
+             "jp PF_S5\n\r"
+             "jnp PF_C5\n\r"
+       "PF_S5:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out5\n\r"
+       "PF_C5:\n\r"
+             "mov $0, %%dx\n\r"
+        "out5:\n\r"
+             "mov %%ax, %0\n\r"
+             "mov %%dx, %1"
+             : "=m" (AX), "=m" (PF)
+             : "m" (CX), "m" (DX));
+    if (PF)
+        printk("ADD: even number LSB-AL: %#x + %#x = %#x (AL: %#x)\n",
+                   CX, DX, AX, AX & 0xFF);
+    else
+        printk("ADD: odd number LSB-AL: %#x + %#x = %#x (AL: %#x)\n",
+                   CX, DX, AX, AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_PF_AND
+    /*
+     * AND -- Logical AND
+     *
+     * Performs a bitwise AND operation on the destination (first) and source
+     * (second) operands and stores the result in the destination operand
+     * location. The source operand can be an immediate, a register, or a 
+     * memory location; the destination operand can be a register or a memory
+     * location. (However, two memory operands cannot be used in one 
+     * instruction.) Each bit of the result is set to 1 if both corresponding
+     * bits of the first and second operands are 1; otherwise, it is set to 0.
+     *
+     * DEST <---- DEST AND SRC
+     */
+    CX = 0x3;
+    DX = 0x1;
+    __asm__ ("mov %2, %%al\n\r"
+             "mov %3, %%bl\n\r"
+             "and %%bl, %%al\n\r"
+             "jp PF_S6\n\r"
+             "jnp PF_C6\n\r"
+       "PF_S6:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out6\n\r"
+       "PF_C6:\n\r"
+             "mov $0, %%dx\n\r"
+        "out6:\n\r"
+             "mov %%ax, %0\n\r"
+             "mov %%dx, %1"
+             : "=m" (AX), "=m" (PF)
+             : "m" (CX), "m" (DX));
+    if (PF)
+        printk("AND: even number LSB-AL: %#x AND %#x = %#x(AL: %#x)\n",
+                       CX, DX, AX & 0xFF, AX & 0xFF);
+    else
+        printk("AND: odd number LSB-AL: %#x AND %#x = %#x(AL: %#x)\n",
+                       CX, DX, AX & 0xFF, AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_PF_CMP
+    /*
+     * CMP -- Compare two operands
+     *
+     * Compares the first source operand with the second source operand and
+     * the status flags in the EFLAGS register according to the result. The
+     * comparison is performed by subtracting the second operand from the
+     * first operand and then setting the status flags in the same manner
+     * as the SUB instruction. When an immediate value is used as an operand,
+     * it is sign-extended to the length of the first operand.
+     *
+     * temp <---- SRC1 - SignExtend(SRC2);
+     * ModifyStatusFlags; 
+     * (* Modify status flags in the same manner as the SUB instruction *)
+     */
+    CX = 0x04;
+    DX = 0x01;
+    __asm__ ("mov %1, %%al\n\r"
+             "mov %2, %%bl\n\r"
+             "cmp %%bl, %%al\n\r"
+             "jp PF_S7\n\r"
+             "jnp PF_C7\n\r"
+       "PF_S7:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out7\n\r"
+       "PF_C7:\n\r"
+             "mov $0, %%dx\n\r"
+        "out7:\n\r"
+             "mov %%dx, %0"
+             : "=m" (PF)
+             : "m" (CX), "m" (DX));
+    if (PF)
+        printk("CMP: even number LSB-AL: %#x CMP %#x\n", CX, DX);
+    else
+        printk("CMP: odd number LSB-AL: %#x CMP %#x\n", CX, DX);
+#endif
+
+#ifdef CONFIG_DEBUG_PF_CMPSB
+    /*
+     * CMPSB -- Compare string operands
+     *
+     * Compares the byte with the first source operand with the byte specified
+     * with the second source operand and sets the status flags in EFLAGS 
+     * register according to the result.
+     *
+     * Both source operands are located in memory. The address of the first
+     * source operand is read from DS:SI (depending on the address-size 
+     * attribute of the instruction is 16). The address of the second source
+     * operand is read from ES:DI (again depending on the address-size 
+     * attribute of the instruction is 16). The DS segment may be overriden
+     * with a segment override prefix, but the ES segment cannot be overridden.
+     *
+     * At the assembly-code level, two forms of this instruction are allowed:
+     * the "explicit-operands" from and the "no-operands" from. The explicit-
+     * operands form (specified with the CMPS mnemonic) allows the two source
+     * operands to the specified explicitly. Here, the source operands should
+     * be symbols that indicate the size and location of the source values.
+     * This explicit-operand form is provided to allow documentation. However,
+     * not that the documentation provided by this form can be misleading.
+     * That is, the source operand symbols must specify the correct type
+     * (size) of the operands (bytes), but they do not have to specify the
+     * correct location. Locations of the source operands are always specified
+     * by the DS:SI and ES:DI register, which must be loaded correctly before
+     * the compare string instruction is executed.
+     *
+     * The size of the source operands is selected with the mnemonic: CMPSB
+     * (byte comparison). After the comparison, the SI and DI registers
+     * increment or decrement automatically according to the setting of the
+     * DF flag in the EFLAGS register. (If the DF flags is 0, the SI and DI
+     * register increment; if the DF flag is 1, the register decrement.) The
+     * register increment or decrement by 1 for byte operations.
+     *
+     * The CMPSB instruction can be preceded by the REP prefix for block
+     * comparisons. More often, however, these instructions will be used in 
+     * a LOOP construct that takes some action based on the setting of the 
+     * status flags before the next comparison is made.
+     */
+    ECX = (unsigned int)(unsigned long)&"Hello EWorld"[0];
+    EDX = (unsigned int)(unsigned long)&"Hello BiscuitOS"[0];
+    CX  = 10;
+    __asm__ ("mov %2, %%esi\n\r"
+             "mov %3, %%edi\n\r"
+             "mov %4, %%cx\n\r"
+             "cld\n\r"
+             "repz cmpsb\n\r"
+             "jp PF_S8\n\r"
+             "jnp PF_C8\n\r"
+       "PF_S8:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out8\n\r"
+       "PF_C8:\n\r"
+             "mov $0, %%dx\n\r"
+        "out8:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%cx, %1"
+             : "=m" (PF), "=m" (AX)
+             : "m" (ECX), "m" (EDX), "m" (CX));
+    if (PF)
+        printk("CMPSB: even number -> \"%s\"[%d]:%c different \"%s\"[%d]:%c\n", 
+            (char *)(unsigned long)ECX, CX - AX - 1, 
+            "Hello EWorld"[CX - AX - 1],
+            (char *)(unsigned long)EDX, CX - AX - 1, 
+            "Hello BiscuitOS"[CX - AX - 1]);
+    else
+        printk("CMPSB: odd number -> \"%s\"[%d]:%c different \"%s\"[%d]:%c\n", 
+            (char *)(unsigned long)ECX, CX - AX - 1,
+            "Hello EWorld"[CX - AX - 1],
+            (char *)(unsigned long)EDX, CX - AX - 1,
+            "Hello BiscuitOS"[CX - AX - 1]);
+#endif
+
+    return 0;
+}
+
 static int debug_eflags(void)
 {
 #ifdef CONFIG_DEBUG_EFLAGS_LAHF
@@ -1773,6 +2213,10 @@ static int debug_eflags(void)
     eflags_CF();
 #endif
 
+#ifdef CONFIG_DEBUG_EFLAGS_PF
+    eflags_PF();
+#endif
+
     return 0;
 }
 late_debugcall(debug_eflags);
-- 
2.17.1

