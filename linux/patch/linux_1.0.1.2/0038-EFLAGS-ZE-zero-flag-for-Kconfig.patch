From 9230d59bb871d7e6eec76bb3918f0235f4cc7eec Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.zhang@aliyun.com>
Date: Sat, 8 Sep 2018 15:15:27 +0800
Subject: [PATCH 38/44] EFLAGS -- ZE: zero flag for Kconfig

---
 tools/demo/mmu/storage/register/EFLAGS/Kconfig   | 228 +++++++++++++++++++++++
 tools/demo/mmu/storage/register/EFLAGS/README.md |   4 +
 2 files changed, 232 insertions(+)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/Kconfig b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
index ec64350..b74c664 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/Kconfig
+++ b/tools/demo/mmu/storage/register/EFLAGS/Kconfig
@@ -413,6 +413,234 @@ config DEBUG_AF_XADD
 
 endif # DEBUG_EFLAGS_AF
 
+config DEBUG_EFLAGS_ZF
+	bool "ZF      Zero flag (bit 6)"
+	help
+	  Carry flag - bit0.
+
+if DEBUG_EFLAGS_ZF
+
+config DEBUG_ZF_AAD
+	bool "AAD     ASCII adjust AX before division"
+	help
+	  AAD instruction for Zero flag.
+
+config DEBUG_ZF_AAM
+	bool "AAM     ASCII adjust AX after multiply"
+	help
+	  AAM instruction for Zero flag.
+
+config DEBUG_ZF_ADC
+	bool "ADC     Addition with carry bit"
+	help
+	  ADC instruction for Zero flag.
+
+config DEBUG_ZF_ADD
+	bool "ADD     Carry on addition"
+	help
+	  ADD instruction for Zero flag.
+
+config DEBUG_ZF_AND
+	bool "AND     Logical AND"
+	help
+	  AND instruction for Zero flag.
+
+config DEBUG_ZF_ARPL
+	bool "ARPL    Adjust PRL Field of segment selector"
+	help
+	  ARPL instruction for Zero flag.
+
+config DEBUG_ZF_BSF
+	bool "BSF     Bit scan forward"
+	help
+	  BSF instruction for Zero flag.
+
+config DEBUG_ZF_BSR
+	bool "BSR     Bit scan reverse"
+	help
+	  BSR instruction for Zero flag.
+
+config DEBUG_ZF_CMP
+	bool "CMP     Compare two operands"
+	help
+	  CMP instruction for Zero flag.
+
+config DEBUG_ZF_CMPSB
+	bool "CMPSB   Compare string operands in byte"
+	help
+	  CMPSB instruction for Zero flag.
+
+config DEBUG_ZF_CMPSW
+	bool "CMPSW   Compare string operands in word"
+	help
+	  CMPSW instruction for Zero flag.
+
+config DEBUG_ZF_CMPSD
+	bool "CMPSD   Compare string operands in Double-word"
+	help
+	  CMPSD instruction for Zero flag.
+
+config DEBUG_ZF_CMPXCHG
+	bool "CMPXCHG     Compare and exchange"
+	help
+	  CMPXCHG instruction for Zero flag.
+
+config DEBUG_ZF_CMPXCHG8B
+	bool "CMPXCHG8B   Compare and exchange bytes"
+	help
+	  CMPXCHGBB instruction for Zero flag.
+
+config DEBUG_ZF_CMPXCHG16B
+	bool "CMPXCHG16B  Compare and exchange bytes"
+	help
+	  CMPXCHGBB instruction for Zero flag.
+
+config DEBUG_ZF_DAA
+	bool "DAA     Decimal adjust AL after addition"
+	help
+	  DAA instruction for Zero flag.
+
+config DEBUG_ZF_DAS
+	bool "DAS     Decimal adjust AL after subtraction"
+	help
+	  DAS instruction for Zero flag.
+
+config DEBUG_ZF_DEC
+	bool "DEC     Decrement by 1"
+	help
+	  DEC instruction for Zero flag.
+
+config DEBUG_ZF_INC
+	bool "INC     Increment by 1"
+	help
+	  INC instruction for Zero flag.
+
+config DEBUG_ZF_JE
+	bool "JE      Jump short if equal"
+	help
+	  JE instruction for Zero flag.
+
+config DEBUG_ZF_JNE
+	bool "JNE     Jump short if not equal"
+	help
+	  JNE instruction for Zero flag.
+
+config DEBUG_ZF_JLE
+	bool "JLE     Jump short if less or equal"
+	help
+	  JLE instruction for Zero flag.
+
+config DEBUG_ZF_JNA
+	bool "JNA     Jump short if not above"
+	help
+	  JNA instruction for Zero flag.
+
+config DEBUG_ZF_JNG
+	bool "JNG     Jump short if not greater or equal"
+	help
+	  JNG instruction for Zero flag.
+
+config DEBUG_ZF_JBE
+	bool "JBE     Jump near if below or equal"
+	help
+	  JBE instruction for Zero flag.
+
+config DEBUG_ZF_JZ
+	bool "JZ      Jump short if zero"
+	help
+	  JZ instruction for Zero flag.
+
+config DEBUG_ZF_JNZ
+	bool "JNZ     Jump short if not zero"
+	help
+	  JNZ instruction for Zero flag.
+
+config DEBUG_ZF_LAR
+	bool "LAR     Load effective address"
+	help
+	  LAR instruction for Zero flag.
+
+config DEBUG_ZF_LSL
+	bool "LSL     Load segment limit"
+	help
+	  LSL instruction for Zero flag.
+
+config DEBUG_ZF_NEG
+	bool "NEG     Two's complement negation"
+	help
+	  NEG instruction for Zero flag.
+
+config DEBUG_ZF_OR
+	bool "OR      Logical inclusive OR"
+	help
+	  OR instruction for Zero flag.
+
+config DEBUG_ZF_RSM
+	bool "RSM     Decimal adjust AL after subtraction"
+	help
+	  RSM instruction for Zero flag.
+
+config DEBUG_ZF_SAL
+	bool "SAL     Shift arithmetic left"
+	help
+	  SAL instruction for Zero flag.
+
+config DEBUG_ZF_SAR
+	bool "SAR     Shift arithmetic right"
+	help
+	  SAR instruction for Zero flag.
+
+config DEBUG_ZF_SHL
+	bool "SHL     Shift logical left"
+	help
+	  SHL instruction for Zero flag.
+
+config DEBUG_ZF_SHR
+	bool "SHR     Shift logical right"
+	help
+	  SHR instruction for Zero flag.
+
+config DEBUG_ZF_SBB
+	bool "SBB     Integer subtraction with borrow"
+	help
+	  SBB instruction for Zero flag.
+
+config DEBUG_ZF_SCASB
+	bool "SCASB   Scan string in byte"
+	help
+	  SCASB instruction for Zero flag.
+
+config DEBUG_ZF_SCASW
+	bool "SCASW   Scan string in word"
+	help
+	  SCASW instruction for Zero flag.
+
+config DEBUG_ZF_SETZ
+	bool "SETZ    Set byte if equal"
+	help
+	  SETZ instruction for Zero flag.
+
+config DEBUG_ZF_SUB
+	bool "SUB     Subtract"
+	help
+	  SUB instruction for Zero flag.
+
+config DEBUG_ZF_TEST
+	bool "TEST    Logical compare"
+	help
+	  TEST instruction for Zero flag.
+
+config DEBUG_ZF_XADD
+	bool "XADD    Echanged and add"
+	help
+	  XADD instruction for Zero flag.
+
+config DEBUG_ZF_XOR
+	bool "XOR     Logical exclusive OR"
+	help
+	  XOR instruction for Zero flag.
+
+endif
 
 endif # DEBUG_REGISTER_EFLAGS
 
diff --git a/tools/demo/mmu/storage/register/EFLAGS/README.md b/tools/demo/mmu/storage/register/EFLAGS/README.md
index cd6e893..0e5e60b 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/README.md
+++ b/tools/demo/mmu/storage/register/EFLAGS/README.md
@@ -34,6 +34,10 @@ indicate the results of arithmetic instructions, such as the `ADD`, `SUB`,
   carry or a borrow out of bit 3 of the result; cleared otherwise. This flag
   is used in binary-coded decimal (BCD) arithmetic.
 
+* **ZA (bit 6)**
+
+  **Zero flag** -- Set if the result is zero; deared otherwise.
+
 ## link
 
   [Intel Architectures Software Developer's Manual: Combined Volumes: 1 -- Chapter 3 Basic Execution Environment: 3.4 Basic Program Execution Register](https://software.intel.com/en-us/articles/intel-sdm)
-- 
2.7.4

