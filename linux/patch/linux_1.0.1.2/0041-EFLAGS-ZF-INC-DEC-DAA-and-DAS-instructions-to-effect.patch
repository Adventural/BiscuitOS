From ea98a5397ad65e5851d3b24dfc8e960579ad888b Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.d.zhang@gmail.com>
Date: Sun, 9 Sep 2018 21:46:30 +0800
Subject: [PATCH 41/44] EFLAGS -- ZF: INC, DEC, DAA, and DAS instructions to
 effect ZF set and clear

---
 tools/demo/mmu/storage/register/EFLAGS/eflags.c | 341 ++++++++++++++++++++++++
 1 file changed, 341 insertions(+)

diff --git a/tools/demo/mmu/storage/register/EFLAGS/eflags.c b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
index 9ebe0f4..4654687 100644
--- a/tools/demo/mmu/storage/register/EFLAGS/eflags.c
+++ b/tools/demo/mmu/storage/register/EFLAGS/eflags.c
@@ -3463,11 +3463,352 @@ static __unused int eflags_ZF(void)
                 ((char *)(unsigned long)EDX)[CX - AX - 1]);
 #endif
 
+#ifdef CONFIG_DEBUG_ZF_CMPSW
+    /*
+     * CMPSW -- Compare string operands in word
+     *
+     * Compares the byte with the first source operand with the byte specified
+     * with the second source operand and sets the status flags in EFLAGS 
+     * register according to the result.
+     *
+     * Both source operands are located in memory. The address of the first
+     * source operand is read from DS:SI (depending on the address-size 
+     * attribute of the instruction is 16). The address of the second source
+     * operand is read from ES:DI (again depending on the address-size 
+     * attribute of the instruction is 16). The DS segment may be overriden
+     * with a segment override prefix, but the ES segment cannot be overridden.
+     *
+     * At the assembly-code level, two forms of this instruction are allowed:
+     * the "explicit-operands" from and the "no-operands" from. The explicit-
+     * operands form (specified with the CMPS mnemonic) allows the two source
+     * operands to the specified explicitly. Here, the source operands should
+     * be symbols that indicate the size and location of the source values.
+     * This explicit-operand form is provided to allow documentation. However,
+     * not that the documentation provided by this form can be misleading.
+     * That is, the source operand symbols must specify the correct type
+     * (size) of the operands (bytes), but they do not have to specify the
+     * correct location. Locations of the source operands are always specified
+     * by the DS:SI and ES:DI register, which must be loaded correctly before
+     * the compare string instruction is executed.
+     *
+     * The size of the source operands is selected with the mnemonic: CMPSW
+     * (word comparison). After the comparison, the SI and DI registers
+     * increment or decrement automatically according to the setting of the
+     * DF flag in the EFLAGS register. (If the DF flags is 0, the SI and DI
+     * register increment; if the DF flag is 1, the register decrement.) The
+     * register increment or decrement by 1 for byte operations.
+     *
+     * The CMPSW instruction can be preceded by the REP prefix for block
+     * comparisons. More often, however, these instructions will be used in 
+     * a LOOP construct that takes some action based on the setting of the 
+     * status flags before the next comparison is made.
+     */
+    ECX = (unsigned int)(unsigned long)&"Hello BiscuitOS"[0];
+    EDX = (unsigned int)(unsigned long)&"Hello Word"[0];
+    CX  = 15;
+    __asm__ ("movl %2, %%esi\n\r"
+             "movl %3, %%edi\n\r"
+             "mov %4, %%cx\n\r"
+             "cld\n\r"
+             "repz cmpsw\n\r"
+             "jz ZF_S6\n\r"
+             "jnz ZF_C6\n\r"
+       "ZF_S6:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out6\n\r"
+       "ZF_C6:\n\r"
+             "mov $0, %%dx\n\r"
+        "out6:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%cx, %1"
+             : "=m" (ZF), "=m" (AX)
+             : "m" (ECX), "m" (EDX), "m" (CX));
+    if (ZF)
+        printk("CMPSW: Zero -> ");
+    else
+        printk("CMPSW: Non-Zero -> ");
+    printk("\"%s\" DIFF \"%s\" on %d word\n", (char *)(unsigned long)ECX,
+               (char *)(unsigned long)EDX, CX - AX - 1);
+    ((char *)(unsigned long)ECX)[(CX - AX) * 2] = '\0';
+    ((char *)(unsigned long)EDX)[(CX - AX) * 2] = '\0';
+    printk("\"%s\" is different \"%s\" in first word compare\n", 
+                      &((char *)(unsigned long)ECX)[(CX - AX - 1) * 2],
+                      &((char *)(unsigned long)EDX)[(CX - AX - 1) * 2]);
+#endif
+
+#ifdef CONFIG_DEBUG_ZF_CMPSD
+    /*
+     * CMPSD -- Compare string operands in Double-word
+     *
+     * Compares the byte with the irst source operand with the byte specified
+     * with the second source operand and sets the status flags in EFLAGS 
+     * register according to the result.
+     *
+     * Both source operands are located in memory. The address of the first
+     * source operand is read from EDS:ESI (depending on the address-size 
+     * attribute of the instruction is 32). The address of the second source
+     * operand is read from ES:EDI (again depending on the address-size 
+     * attribute of the instruction is 32). The DS segment may be overriden
+     * with a segment override prefix, but the ES segment cannot be overridden.
+     *
+     * At the assembly-code level, two forms of this instruction are allowed:
+     * the "explicit-operands" from and the "no-operands" from. The explicit-
+     * operands form (specified with the CMPS mnemonic) allows the two source
+     * operands to the specified explicitly. Here, the source operands should
+     * be symbols that indicate the size and location of the source values.
+     * This explicit-operand form is provided to allow documentation. However,
+     * not that the documentation provided by this form can be misleading.
+     * That is, the source operand symbols must specify the correct type
+     * (size) of the operands (bytes), but they do not have to specify the
+     * correct location. Locations of the source operands are always specified
+     * by the DS:ESI and ES:EDI register, which must be loaded correctly before
+     * the compare string instruction is executed.
+     *
+     * The size of the source operands is selected with the mnemonic: CMPSD
+     * (double-word comparison). After the comparison, the ESI and EDI registers
+     * increment or decrement automatically according to the setting of the
+     * DF flag in the EFLAGS register. (If the DF flags is 0, the SI and DI
+     * register increment; if the DF flag is 1, the register decrement.) The
+     * register increment or decrement by 1 for byte operations.
+     *
+     * The CMPSD instruction can be preceded by the REP prefix for block
+     * comparisons. More often, however, these instructions will be used in 
+     * a LOOP construct that takes some action based on the setting of the 
+     * status flags before the next comparison is made.
+     */
+    ECX = (unsigned int)(unsigned long)&"Hello BiscuitOS"[0];
+    EDX = (unsigned int)(unsigned long)&"Hello World"[0];
+    CX  = 15;
+    __asm__ ("movl %2, %%esi\n\r"
+             "movl %3, %%edi\n\r"
+             "mov %4, %%cx\n\r"
+             "cld\n\r"
+             "repz cmpsd\n\r"
+             "jz ZF_S7\n\r"
+             "jz ZF_C7\n\r"
+       "ZF_S7:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out7\n\r"
+       "ZF_C7:\n\r"
+             "mov $0, %%dx\n\r"
+        "out7:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%cx, %1"
+             : "=m" (ZF), "=m" (AX)
+             : "m" (ECX), "m" (EDX), "m" (CX));
+    if (ZF)
+        printk("CMPSD: Zero -> ");
+    else
+        printk("CMPSD: Non-Zero -> ");
+    printk("\"%s\" DIFF \"%s\" on %d Double-word\n", 
+          (char *)(unsigned long)ECX, (char *)(unsigned long)EDX, 
+          CX - AX - 1); 
+    ((char *)(unsigned long)ECX)[(CX - AX) * 4] = '\0';
+    ((char *)(unsigned long)EDX)[(CX - AX) * 4] = '\0';
+
+    printk("\"%s\" is different \"%s\" in first Double-word compare\n",
+           &((char *)(unsigned long)ECX)[(CX - AX - 1) * 4], 
+           &((char *)(unsigned long)EDX)[(CX - AX - 1) * 4]);
+#endif
+
+#ifdef CONFIG_DEBUG_ZF_DAA
+    /*
+     * DAA -- Decimal Adjust AL after Addition
+     *
+     * Adjust the sum of two packed BCD values to create a packed BCD result.
+     * The AL register is the implied source and destination operand. The 
+     * DAA instruction is only useful when it follow an ADD instruction that
+     * adds (binary addition) two 2-digit, packed BCD values and stores a
+     * byte result in the AL register. The DAA instruction then adjusts the
+     * contents of the AL register to contain the correct 2-digit, packed
+     * BCD result. If a decimal carry is detected, the CF and AF flags are
+     * set accordingly.
+     *
+     * IF instruction DAA
+     *     old_AL <---- AL
+     *     old_CF <---- CF
+     *     CF     <---- 0
+     *     IF (((AL AND 0FH) > 9) or AF = 1)
+     *         THEN
+     *             AL <---- AL + 6 
+     *             CF <---- old_CF or (Carry from AL <---- AL + 6)
+     *             AF <---- 1
+     *         ELSE
+     *             AF <---- 0
+     *     FI
+     *     IF ((old_AL > 99H) or (old_CF = 1))
+     *         THEN
+     *             AL <---- AL + 60H
+     *             CF <---- 1
+     *         ELSE
+     *             CF <---- 0
+     *     FI
+     * FI
+     *
+     * The CF and AF flags are set if the adjustment of the value results
+     * in a decimal carry in either digit of the result. The SF, ZF, and PF
+     * flags are set according to the result. The OF flag is undefined.
+     */
+    CX = 0x99;
+    DX = 0x1;
+    __asm__ ("mov %3, %%al\n\r"
+             "mov %4, %%bl\n\r"
+             "add %%bl, %%al\n\r"
+             "mov %%ax, %0\n\r"
+             "daa\n\r"
+             "jz ZF_S8\n\r"
+             "jnz ZF_C8\n\r"
+       "ZF_S8:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out8\n\r"
+       "ZF_C8:\n\r"
+             "mov $0, %%dx\n\r"
+        "out8:\n\r"
+             "mov %%dx, %1\n\r"
+             "mov %%ax, %2"
+             : "=m" (AX), "=m" (ZF), "=m" (BX)
+             : "m" (CX), "m" (DX));
+    if (ZF)
+        printk("DAA: Zero -> %#x + %#x = %#x(%#x)\n", CX, DX, 
+                        BX & 0xFF, AX & 0xFF);
+    else
+        printk("DAA: Non-Zero -> %#x + %#x = %#x(%#x)\n", CX, DX, 
+                        BX & 0xFF, AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_ZF_DAS
+    /*
+     * DAS -- Decimal Adjust AL after Subtraction
+     *
+     * Adjusts the result of the subtraction of two packed BCD values to 
+     * create a packed BCD result. The AL register is the implied source
+     * and destination operand. The DAS instruction is only useful when
+     * it follows a SUB instruction that subtracts (binary subtraction)
+     * one 2-digit, packed BCD value from another and stores a byte result
+     * in the AL register. The DAS instruction then adjusts the contents of
+     * the AL register to contain the correct 2-digit, packed BCD result.
+     * IF a decimal borrow is detected, the CF and AF flags are set 
+     * accordingly.
+     *
+     * IF instruction DAS
+     *     old_AL <---- AL
+     *     old_CF <---- CF
+     *     CF     <---- 0
+     *     IF (((AL AND 0FH) > 9) or AF = 1)
+     *         THEN
+     *             AL <---- AL - 6
+     *             CF <---- old_CF or (Borrow from AL <---- AL - 6)
+     *             AF <---- 1
+     *         ELSE
+     *             AF <---- 0
+     *     FI
+     *     IF ((old_AL > 99H) or (old_CF = 1))
+     *         THEN
+     *             AL <---- AL - 60H
+     *             CF <---- 1
+     *     FI
+     * FI
+     */
+    CX = 0x100;
+    DX = 0x0;
+    __asm__ ("mov %3, %%ax\n\r"
+             "mov %4, %%bx\n\r"
+             "sub %%bx, %%ax\n\r"
+             "mov %%ax, %0\n\r"
+             "das\n\r"
+             "jz ZF_S9\n\r"
+             "jnz ZF_C9\n\r"
+       "ZF_S9:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp out9\n\r"
+       "ZF_C9:\n\r"
+             "mov $0, %%dx\n\r"
+        "out9:\n\r"
+             "mov %%dx, %1\n\r"
+             "mov %%ax, %2"
+             : "=m" (AX), "=m" (ZF), "=m" (BX)
+             : "m" (CX), "m" (DX));
+    if (ZF)
+        printk("DAS: Zero -> %#x - %#x = %#x(%#x)\n", CX, DX, BX, AX & 0xFF);
+    else
+        printk("DAS: Non-Zero -> %#x - %#x = %#x(%#x)\n", CX, DX, BX, 
+                                                                  AX & 0xFF);
+#endif
+
+#ifdef CONFIG_DEBUG_ZF_DEC
+    /*
+     * DEC -- Decreament by 1
+     *
+     * Subtracts 1 from the destination operand, while preserving the state
+     * of the CF flag. The destination operand can be a register or a memory
+     * location. This instrution allows a loop counter to be updated without
+     * disturbing the CF flag. (To perform a decrement operation that updates
+     * the CF flag, use a SUB instruction with an immediate operand of 1.)
+     *
+     * DEST <---- DEST - 1
+     */
+    CX = 0x1;
+    __asm__ ("mov %2, %%al\n\r"
+             "dec %%al\n\r"
+             "jz ZF_SA\n\r"
+             "jnz ZF_CA\n\r"
+       "ZF_SA:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outA\n\r"
+       "ZF_CA:\n\r"
+             "mov $0, %%dx\n\r"
+        "outA:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (ZF), "=m" (AX)
+             : "m" (CX));
+    if (ZF)
+        printk("DEC: Zero -> %#x - 1 = %#x\n", CX, AX & 0xFF);
+    else
+        printk("DEC: No-Zero -> %#x - 1 = %#x\n", CX, AX & 0xFF);
+
+#endif
+
+#ifdef CONFIG_DEBUG_ZF_INC
+    /*
+     * INC -- Increment by 1
+     *
+     * Adds 1 to the destination operand, while preserving the state of CF
+     * flag. The destination operand can be a register or a memory location.
+     * This instruction allows a loop counter to the updated without 
+     * disturbing the CF flag. (Use a ADD instruction with an immediate 
+     * operand of 1 to perform an increment operation that does updates the
+     * CF flag.)
+     *
+     * DEST <---- DEST + 1;
+     */
+    CX = -1;
+    __asm__ ("mov %2, %%al\n\r"
+             "inc %%al\n\r"
+             "jz ZF_SB\n\r"
+             "jnz ZF_CB\n\r"
+       "ZF_SB:\n\r"
+             "mov $1, %%dx\n\r"
+             "jmp outB\n\r"
+       "ZF_CB:\n\r"
+             "mov $0, %%dx\n\r"
+        "outB:\n\r"
+             "mov %%dx, %0\n\r"
+             "mov %%ax, %1"
+             : "=m" (ZF), "=m" (AX)
+             : "m" (CX));
+    if (ZF)
+        printk("INC: Zero -> %#x + 1 = %#x\n", CX, AX & 0xFF);
+    else
+        printk("INC: Non-Zero -> %#x + 1 = %#x\n", CX, AX & 0xFF);
+#endif
+
     return 0;
 }
 
 static int debug_eflags(void)
 {
+
 #ifdef CONFIG_DEBUG_EFLAGS_LAHF
     eflags_LAHF();
 #endif
-- 
2.7.4

